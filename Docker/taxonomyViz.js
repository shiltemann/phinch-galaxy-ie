// Generated by CoffeeScript 1.10.0
(function() {
  var taxonomyViz,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  taxonomyViz = (function() {
    var LayerID, VizID, backendServer, biom, bubbleView, columns_sample_name_array, deleteOTUArr, deleteSampleArr, filename, fillCol, filterOptionJSON, format, globalColoring, groupable, layerNameArr, map_array, new_data_matrix, new_data_matrix_onLayer, percentView, phinchCol_0, phinchCol_1, phinchCol_2, phinchPalete, selected_attributes_array, selected_attributes_units_array, selected_phinchID_array, selected_samples, shareFlag, sortDescFlag, sortIdFlag, standardizedValue, sumEachCol, sumEachTax, taxonomy_comb_count_onLayer, unique_taxonomy_comb, unique_taxonomy_comb_count, unique_taxonomy_comb_onLayer, vizNameArr, vizdata;

    VizID = 1;

    LayerID = 2;

    biom = {};

    filename = 'phinch';

    layerNameArr = ['kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species'];

    vizNameArr = ['taxonomyBarChart', 'bubbleChart', 'sankeyDiagram', 'donutPartition', 'attributesColumn'];

    percentView = false;

    bubbleView = true;

    shareFlag = false;

    sortIdFlag = false;

    sortDescFlag = false;

    standardizedValue = 0;

    format = d3.format(',d');

    map_array = [];

    groupable = [];

    new_data_matrix = [];

    selected_samples = [];

    unique_taxonomy_comb = [];

    selected_attributes_array = [];

    columns_sample_name_array = [];

    unique_taxonomy_comb_count = [];

    selected_attributes_units_array = [];

    vizdata = [];

    sumEachCol = [];

    sumEachTax = [];

    deleteOTUArr = [];

    deleteSampleArr = [];

    selected_phinchID_array = [];

    new_data_matrix_onLayer = [];

    unique_taxonomy_comb_onLayer = [];

    taxonomy_comb_count_onLayer = [];

    phinchCol_0 = ['#3182bd', '#6baed6', '#9ecae1', '#c6dbef', '#e6550d', '#fd8d3c', '#fdae6b', '#fdd0a2', '#31a354', '#74c476', '#a1d99b', '#c7e9c0', '#756bb1', '#9e9ac8', '#bcbddc', '#dadaeb', '#636363', '#969696', '#bdbdbd', '#d9d9d9'];

    phinchCol_1 = ['#ab80b6', '#b07c83', '#b3c4db', '#3e3994', '#583c9e', '#8c3c9e', '#953884', '#5f3a87', '#47b8b7', '#f15e76', '#d7473e', '#7f759e', '#5a598f', '#7a8fa6', '#547f86', '#3e61c2', '#449acd', '#ee7051', '#f69f4b', '#d77440'];

    phinchCol_2 = ['#449acd', '#fee889', '#d7473e', '#7f759e', '#d77440', '#3e61c2', '#f15e76', '#5a598f', '#f69f4b', '#b07c83', '#ab80b6', '#47b8b7', '#ee7051', '#5f3a87', '#8ddba0', '#953884', '#349a74', '#8c3c9c', '#583c9e', '#547f86'];

    fillCol = phinchCol_2;

    phinchPalete = function() {
      return d3.scale.ordinal().range(fillCol);
    };

    globalColoring = phinchPalete();

    backendServer = 'http://' + window.location.host + window.location.pathname.substr(0, window.location.pathname.lastIndexOf('/')) + "/server/";

    filterOptionJSON = {};

    function taxonomyViz(_VizID, _LayerID) {
      this.shareCallback = bind(this.shareCallback, this);
      this.shareRequest = bind(this.shareRequest, this);
      this.generateBiomZip = bind(this.generateBiomZip, this);
      this.submitShare = bind(this.submitShare, this);
      this.shareHashExistsCallback = bind(this.shareHashExistsCallback, this);
      this.shareViz = bind(this.shareViz, this);
      this.downloadChart = bind(this.downloadChart, this);
      this.clickSmallSankeyNode = bind(this.clickSmallSankeyNode, this);
      this.clickLargeSnakeyNode = bind(this.clickLargeSnakeyNode, this);
      VizID = _VizID;
      LayerID = _LayerID;
      db.open({
        server: "BiomSample",
        version: 1,
        schema: {
          "biomSample": {
            key: {
              keyPath: 'id',
              autoIncrement: true
            }
          }
        }
      }).done((function(_this) {
        return function(s) {
          return s.biomSample.query().all().execute().done(function(results) {
            var selected_groupable_array;
            filterOptionJSON = results[results.length - 1];
            selected_samples = filterOptionJSON.selected_sample;
            groupable = filterOptionJSON.groupable;
            selected_groupable_array = filterOptionJSON.selected_groupable_array;
            selected_attributes_array = filterOptionJSON.selected_attributes_array;
            selected_attributes_units_array = filterOptionJSON.selected_attributes_units_array;
            selected_phinchID_array = filterOptionJSON.selected_phinchID_array;
            return db.open({
              server: "BiomData",
              version: 1,
              schema: {
                "biom": {
                  key: {
                    keyPath: 'id',
                    autoIncrement: true
                  }
                }
              }
            }).done(function(s) {
              return s.biom.query().all().execute().done(function(results) {
                var currentData, i, l, n, ref, ref1;
                currentData = results[results.length - 1];
                biom = JSON.parse(currentData.data);
                filename = currentData.name;
                filename = filename.substring(0, filename.length - 5);
                $("#file_details").html("");
                $("#file_details").append("ANALYZING &nbsp;<span>" + currentData.name.substring(0, 30) + "</span> &nbsp;&nbsp;&nbsp;" + (parseFloat(currentData.size.valueOf() / 1000000)).toFixed(1) + " MB <br/><br />OBSERVATION &nbsp;&nbsp;&nbsp;<span>" + format(biom.shape[0]) + "</span> &nbsp;&nbsp;&nbsp; SELECTED SAMPLES &nbsp;&nbsp;&nbsp;<span>" + format(selected_samples.length) + "</span>");
                if (LayerID !== 2) {
                  $('.rectLayer').removeClass('selectedLayer');
                  $('.cntline').removeClass('selectedLine');
                  for (i = l = 1, ref = LayerID; 1 <= ref ? l <= ref : l >= ref; i = 1 <= ref ? ++l : --l) {
                    $('#layer_' + i).addClass('selectedLayer');
                  }
                  if (LayerID > 1) {
                    for (i = n = 1, ref1 = LayerID - 1; 1 <= ref1 ? n <= ref1 : n >= ref1; i = 1 <= ref1 ? ++n : --n) {
                      $('.cntline:eq(' + (i - 1) + ')').addClass('selectedLine');
                    }
                  }
                }
                $('.rectLayer').click(function(evt) {
                  var o, p, ref2, ref3, that;
                  that = _this;
                  LayerID = parseInt(evt.currentTarget.id.replace("layer_", ""));
                  if (VizID === 3 && LayerID === 1) {
                    return alert('Sankey diagram has at least two layers!');
                  } else if (VizID === 3 && (LayerID === 6 || LayerID === 7)) {
                    return alert('Cannot go deeper to the 6th or 7th layer!');
                  } else {
                    $('.rectLayer').removeClass('selectedLayer');
                    $('.cntline').removeClass('selectedLine');
                    for (i = o = 1, ref2 = LayerID; 1 <= ref2 ? o <= ref2 : o >= ref2; i = 1 <= ref2 ? ++o : --o) {
                      $('#layer_' + i).addClass('selectedLayer');
                    }
                    if (LayerID > 1) {
                      for (i = p = 1, ref3 = LayerID - 1; 1 <= ref3 ? p <= ref3 : p >= ref3; i = 1 <= ref3 ? ++p : --p) {
                        $('.cntline:eq(' + (i - 1) + ')').addClass('selectedLine');
                      }
                    }
                    if ($('#valueBtn').hasClass('clicked')) {
                      percentView = false;
                    } else {
                      percentView = true;
                    }
                    return that.generateVizData();
                  }
                });
                $('#valueBtn').click(function(evt) {
                  if (percentView) {
                    percentView = false;
                    LayerID = parseInt($('.selectedLayer').length);
                    $('#valueBtn').addClass('clicked');
                    $('#percentBtn').removeClass('clicked');
                    return _this.generateVizData();
                  }
                });
                $('#percentBtn').click(function(evt) {
                  if (!percentView) {
                    percentView = true;
                    LayerID = parseInt($('.selectedLayer').length);
                    $('#valueBtn').removeClass('clicked');
                    $('#percentBtn').addClass('clicked');
                    return _this.generateVizData();
                  }
                });
                $('#idBtn').click(function(evt) {
                  if (sortIdFlag) {
                    if ($('#idBtn').html() === 'ID  <i class="icon-sort-amount-asc"></i>') {
                      $('#idBtn').html('ID  <i class="icon-sort-amount-desc"></i>');
                      sortDescFlag = true;
                    } else {
                      $('#idBtn').html('ID  <i class="icon-sort-amount-asc"></i>');
                      sortDescFlag = false;
                    }
                  } else {
                    sortIdFlag = true;
                    sortDescFlag = false;
                    $('#idBtn').html('ID  <i class="icon-sort-amount-asc"></i>');
                    $('#nameBtn').removeClass('clicked');
                    $('#idBtn').addClass('clicked');
                  }
                  return _this.drawTaxonomyBar();
                });
                $('#nameBtn').click(function(evt) {
                  if (!sortIdFlag) {
                    if ($('#nameBtn').html() === 'Name  <i class="icon-sort-amount-asc"></i>') {
                      $('#nameBtn').html('Name  <i class="icon-sort-amount-desc"></i>');
                      sortDescFlag = true;
                    } else {
                      $('#nameBtn').html('Name  <i class="icon-sort-amount-asc"></i>');
                      sortDescFlag = false;
                    }
                  } else {
                    sortIdFlag = false;
                    sortDescFlag = false;
                    $('#nameBtn').html('Name  <i class="icon-sort-amount-asc"></i>');
                    $('#nameBtn').addClass('clicked');
                    $('#idBtn').removeClass('clicked');
                  }
                  return _this.drawTaxonomyBar();
                });
                $('#bubbleBtn').click(function(evt) {
                  if (!bubbleView) {
                    bubbleView = true;
                    LayerID = parseInt($('.selectedLayer').length);
                    $('#bubbleBtn').addClass('clicked');
                    $('#listBtn').removeClass('clicked');
                    return _this.generateVizData();
                  }
                });
                $('#listBtn').click(function(evt) {
                  if (bubbleView) {
                    bubbleView = false;
                    LayerID = parseInt($('.selectedLayer').length);
                    $('#bubbleBtn').removeClass('clicked');
                    $('#listBtn').addClass('clicked');
                    return _this.generateVizData();
                  }
                });
                $('#legend_header').click(function() {
                  if ($('#legend_header').html() === 'TOP SEQS') {
                    $('#outline').hide();
                    return $('#legend_header').animate({
                      width: ($('#legend_container').width() + 1) + 'px'
                    }, {
                      duration: 250,
                      specialEasing: {
                        width: "easeInOutQuad"
                      },
                      complete: function() {
                        $('#legend_container').animate({
                          opacity: 1
                        }, {
                          duration: 250
                        });
                        $('#legend_header').html('TOP SEQUENCES');
                        return $('#legend_header').css({
                          'background': '#241f20 url("css/images/collapse.png") no-repeat',
                          'color': '#fff'
                        });
                      }
                    });
                  } else {
                    return $('#legend_container').animate({
                      opacity: '0'
                    }, {
                      duration: 250,
                      specialEasing: {
                        opacity: "easeInOutQuad"
                      },
                      complete: function() {
                        $('#legend_header').animate({
                          width: '180px'
                        }, {
                          duration: 250
                        });
                        $('#legend_header').html('TOP SEQS');
                        $('#legend_header').css({
                          'background': '#f0f0f0',
                          'color': '#241f20'
                        });
                        return $('#outline').show();
                      }
                    });
                  }
                });
                $('#count_header').click(function() {
                  if ($('#count_header').html() === 'SAMPLE DIST') {
                    return $('#count_header').animate({
                      width: '401px'
                    }, {
                      duration: 250,
                      specialEasing: {
                        width: "easeInOutQuad"
                      },
                      complete: function() {
                        $('#count_container').animate({
                          opacity: 1
                        }, {
                          duration: 250
                        });
                        $('#count_header').html('SAMPLE DISTRIRBUTION');
                        return $('#count_header').css({
                          'background': '#241f20 url("css/images/collapse.png") no-repeat',
                          'color': '#fff'
                        });
                      }
                    });
                  } else {
                    return $('#count_container').animate({
                      opacity: '0'
                    }, {
                      duration: 250,
                      specialEasing: {
                        opacity: "easeInOutQuad"
                      },
                      complete: function() {
                        $('#count_header').animate({
                          width: '180px'
                        }, {
                          duration: 250
                        });
                        $('#count_header').html('SAMPLE DIST');
                        return $('#count_header').css({
                          'background': '#f0f0f0',
                          'color': '#241f20'
                        });
                      }
                    });
                  }
                });
                $('#downloadFile').click(function() {
                  $('#downloadFile i').removeClass('icon-download');
                  $('#downloadFile i').addClass('icon-spinner icon-spin');
                  return setTimeout(_this.doZip, 250);
                });
                $('#export').click(_this.downloadChart);
                $('#share').click(_this.shareViz);
                _this.prepareData();
                return _this.generateVizData();
              });
            });
          });
        };
      })(this));
    }

    taxonomyViz.prototype.prepareData = function() {
      var comb_len, comp_i, flag, i, j, l, n, o, p, q, ref, ref1, ref2, ref3, ref4, ref5, results1, t;
      for (i = l = 0, ref = biom.rows.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        flag = true;
        comp_i = new Array(7);
        comb_len = unique_taxonomy_comb.length;
        if (biom.rows[i].metadata.taxonomy.indexOf(';') !== -1) {
          comp_i = biom.rows[i].metadata.taxonomy.replace(/\s+/g, '').replace(/;/g, ',').split(',');
        } else {
          comp_i = biom.rows[i].metadata.taxonomy;
        }
        if (comp_i[0].indexOf('k__') === -1) {
          comp_i[0] = 'k__';
        }
        switch (comp_i.length) {
          case 6:
            comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], comp_i[4], comp_i[5], 's__'];
            break;
          case 5:
            comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], comp_i[4], 'g__', 's__'];
            break;
          case 4:
            comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], 'f__', 'g__', 's__'];
            break;
          case 3:
            comp_i = [comp_i[0], comp_i[1], comp_i[2], 'o__', 'f__', 'g__', 's__'];
            break;
          case 2:
            comp_i = [comp_i[0], comp_i[1], 'c__', 'o__', 'f__', 'g__', 's__'];
            break;
          case 1:
            comp_i = [comp_i[0], 'p__', 'c__', 'o__', 'f__', 'g__', 's__'];
            break;
          case 0:
            comp_i = ['k__', 'p__', 'c__', 'o__', 'f__', 'g__', 's__'];
        }
        if (comb_len > 0) {
          for (j = n = 0, ref1 = comb_len - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; j = 0 <= ref1 ? ++n : --n) {
            if (comp_i[0] === unique_taxonomy_comb[j][0] && comp_i[1] === unique_taxonomy_comb[j][1] && comp_i[2] === unique_taxonomy_comb[j][2] && comp_i[3] === unique_taxonomy_comb[j][3] && comp_i[4] === unique_taxonomy_comb[j][4] && comp_i[5] === unique_taxonomy_comb[j][5] && comp_i[6] === unique_taxonomy_comb[j][6]) {
              unique_taxonomy_comb_count[j]++;
              map_array[i] = j;
              flag = false;
              break;
            }
          }
        }
        if (flag) {
          map_array[i] = comb_len;
          unique_taxonomy_comb_count[comb_len] = 1;
          unique_taxonomy_comb[comb_len] = comp_i;
        }
      }
      for (i = o = 0, ref2 = unique_taxonomy_comb.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
        new_data_matrix[i] = [];
        for (j = p = 0, ref3 = biom.shape[1] - 1; 0 <= ref3 ? p <= ref3 : p >= ref3; j = 0 <= ref3 ? ++p : --p) {
          new_data_matrix[i][j] = 0;
        }
      }
      for (i = q = 0, ref4 = biom.data.length - 1; 0 <= ref4 ? q <= ref4 : q >= ref4; i = 0 <= ref4 ? ++q : --q) {
        new_data_matrix[map_array[biom.data[i][0]]][biom.data[i][1]] += biom.data[i][2];
      }
      results1 = [];
      for (i = t = 0, ref5 = biom.shape[1] - 1; 0 <= ref5 ? t <= ref5 : t >= ref5; i = 0 <= ref5 ? ++t : --t) {
        results1.push(columns_sample_name_array.push(biom.columns[i].id));
      }
      return results1;
    };

    taxonomyViz.prototype.generateVizData = function() {
      var comp_i, flag, flag_count, i, j, k, l, n, o, p, q, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, t, u, v, viz_map_array, z;
      viz_map_array = [];
      new_data_matrix_onLayer = [];
      unique_taxonomy_comb_onLayer = [];
      if (LayerID < 7) {
        for (i = l = 0, ref = unique_taxonomy_comb.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
          comp_i = unique_taxonomy_comb[i];
          flag = true;
          if (unique_taxonomy_comb_onLayer.length > 0) {
            for (j = n = 0, ref1 = unique_taxonomy_comb_onLayer.length - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; j = 0 <= ref1 ? ++n : --n) {
              flag_count = 0;
              for (k = o = 0, ref2 = LayerID - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; k = 0 <= ref2 ? ++o : --o) {
                if (comp_i[k] === unique_taxonomy_comb_onLayer[j][k]) {
                  flag_count++;
                }
              }
              if (flag_count === LayerID) {
                viz_map_array[i] = j;
                flag = false;
                break;
              }
            }
          }
          if (flag) {
            viz_map_array[i] = unique_taxonomy_comb_onLayer.length;
            switch (LayerID) {
              case 6:
                comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], comp_i[4], comp_i[5], 's__'];
                break;
              case 5:
                comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], comp_i[4], 'g__', 's__'];
                break;
              case 4:
                comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], 'f__', 'g__', 's__'];
                break;
              case 3:
                comp_i = [comp_i[0], comp_i[1], comp_i[2], 'o__', 'f__', 'g__', 's__'];
                break;
              case 2:
                comp_i = [comp_i[0], comp_i[1], 'c__', 'o__', 'f__', 'g__', 's__'];
                break;
              case 1:
                comp_i = [comp_i[0], 'p__', 'c__', 'o__', 'f__', 'g__', 's__'];
                break;
              default:
                comp_i = comp_i;
            }
            unique_taxonomy_comb_onLayer[unique_taxonomy_comb_onLayer.length] = comp_i;
          }
        }
        for (i = p = 0, ref3 = unique_taxonomy_comb_onLayer.length - 1; 0 <= ref3 ? p <= ref3 : p >= ref3; i = 0 <= ref3 ? ++p : --p) {
          new_data_matrix_onLayer[i] = [];
          for (j = q = 0, ref4 = new_data_matrix[0].length - 1; 0 <= ref4 ? q <= ref4 : q >= ref4; j = 0 <= ref4 ? ++q : --q) {
            new_data_matrix_onLayer[i][j] = 0;
          }
        }
        for (i = t = 0, ref5 = new_data_matrix.length - 1; 0 <= ref5 ? t <= ref5 : t >= ref5; i = 0 <= ref5 ? ++t : --t) {
          for (j = u = 0, ref6 = new_data_matrix[0].length - 1; 0 <= ref6 ? u <= ref6 : u >= ref6; j = 0 <= ref6 ? ++u : --u) {
            new_data_matrix_onLayer[viz_map_array[i]][j] += new_data_matrix[i][j];
          }
        }
      } else {
        unique_taxonomy_comb_onLayer = unique_taxonomy_comb;
        new_data_matrix_onLayer = new_data_matrix;
      }
      this.fadeInOutCtrl();
      switch (VizID) {
        case 1:
          this.barFilterControl();
          return this.drawTaxonomyBar();
        case 2:
          this.calculateOTUonLayer();
          this.bubbleFilterControl();
          return this.drawTaxonomyBubble();
        case 3:
          return this.drawTaxonomySankey();
        case 4:
          if (groupable.length > 1) {
            for (i = v = 0, ref7 = groupable.length - 1; 0 <= ref7 ? v <= ref7 : v >= ref7; i = 0 <= ref7 ? ++v : --v) {
              $('#attributes_dropdown').append('<option>' + groupable[i] + '</option>');
            }
            if ($('#attributes_dropdown option:first').text() !== void 0) {
              this.drawTaxonomyDonuts($('#attributes_dropdown').find(":selected").text());
            } else {
              this.drawTaxonomyDonuts(groupable[0]);
            }
            $('#attributes_dropdown').fadeIn(800);
            return $('#attributes_dropdown').change((function(_this) {
              return function(evt) {
                return _this.drawTaxonomyDonuts(evt.currentTarget.value);
              };
            })(this));
          } else if (groupable.length === 1) {
            $('#attributes_dropdown').hide();
            return this.drawTaxonomyDonuts(groupable[0]);
          } else {
            return alert("Donut partition chart not available for this dataset!");
          }
          break;
        case 5:
          if (selected_attributes_array.length > 0) {
            $('#attributes_dropdown').html("");
            for (i = z = 0, ref8 = selected_attributes_array.length - 1; 0 <= ref8 ? z <= ref8 : z >= ref8; i = 0 <= ref8 ? ++z : --z) {
              $('#attributes_dropdown').append('<option>' + selected_attributes_array[i] + '</option>');
            }
            if ($('#attributes_dropdown option:first').text() !== void 0) {
              this.drawTaxonomyByAttributes($('#attributes_dropdown').find(":selected").text());
            } else {
              this.drawTaxonomyByAttributes(selected_attributes_array[0]);
            }
            return $('#attributes_dropdown').change((function(_this) {
              return function(evt) {
                return _this.drawTaxonomyByAttributes(evt.currentTarget.value);
              };
            })(this));
          } else {
            return alert("Attributes column chart not available for this dataset!");
          }
          break;
        default:
          return alert('Data is not loading correctly! ...');
      }
    };

    taxonomyViz.prototype.drawTaxonomyBar = function() {
      var content, delePanel, divCont, fakeArr, gLegend, height, i, infoPanel, j, k, l, label, legendArr, legendClone, legendItem, legendItemEnter, margin, maxLegendItems, max_single, n, numericFlag, o, order, p, phinchID_map, q, rect, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, rule, selected_phinchID_array_clone, selected_samples_clone, sorted_selected_phinchID_array, spliceInd, svg, t, taxonomy, temp, that, u, v, width, x, y, z;
      this.fadeInOutCtrl();
      that = this;
      selected_samples_clone = selected_samples.slice(0);
      selected_phinchID_array_clone = selected_phinchID_array.slice(0);
      sorted_selected_phinchID_array = new Array(selected_phinchID_array_clone.length - deleteSampleArr.length);
      if (deleteSampleArr.length > 0) {
        content = '<ul class="basicTooltip">';
        for (k = l = 0, ref = deleteSampleArr.length - 1; 0 <= ref ? l <= ref : l >= ref; k = 0 <= ref ? ++l : --l) {
          content += '<li>Sample ' + deleteSampleArr[k] + ', ' + selected_phinchID_array[selected_samples.indexOf(deleteSampleArr[k])] + '<span id = "delete_' + deleteSampleArr[k] + '">show</span></li>';
          spliceInd = selected_samples_clone.indexOf(deleteSampleArr[k]);
          selected_samples_clone.splice(spliceInd, 1);
          selected_phinchID_array_clone.splice(spliceInd, 1);
        }
        content += '</ul>';
        d3.select("#taxonomy_container").append("div").attr('id', 'deleteSampleArr').html('<p>' + deleteSampleArr.length + ' samples hidden&nbsp;&nbsp;<span>show all</span></p><i class="icon-remove icon-large" id = "iconRemover4SampleDiv"></i>' + content);
        $('#deleteSampleArr p span').on('click', function(e) {
          d3.selectAll('#deleteSampleArr ul').transition().duration(200).ease("quad").style('opacity', 1);
          return d3.selectAll('#iconRemover4SampleDiv').transition().duration(250).ease("quad").style('opacity', 1);
        });
        $('#iconRemover4SampleDiv').on('click', function(e) {
          d3.selectAll('#deleteSampleArr ul').transition().duration(250).ease("quad").style('opacity', 0);
          return d3.selectAll('#iconRemover4SampleDiv').transition().duration(200).ease("quad").style('opacity', 0);
        });
        $('#deleteSampleArr ul li').each(function(index) {
          return $(this).click(function() {
            var n, ref1, thisSampID, updateContent;
            thisSampID = parseInt($(this)[0].children[0].id.replace('delete_', ''));
            deleteSampleArr.splice(deleteSampleArr.indexOf(thisSampID), 1);
            updateContent = '';
            for (k = n = 0, ref1 = deleteSampleArr.length - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; k = 0 <= ref1 ? ++n : --n) {
              updateContent += '<li>Sample ' + deleteSampleArr[k] + ', ' + selected_phinchID_array[selected_samples.indexOf(deleteSampleArr[k])] + '<span id = "delete_' + deleteSampleArr[k] + '">show</span></li>';
            }
            d3.select('#deleteSampleArr ul').html(updateContent);
            return that.drawTaxonomyBar();
          });
        });
      }
      phinchID_map = [];
      numericFlag = true;
      if (selected_phinchID_array_clone.length > 0) {
        for (i = n = 0, ref1 = selected_phinchID_array_clone.length - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; i = 0 <= ref1 ? ++n : --n) {
          phinchID_map.push({
            'index': i,
            'phinchName': selected_phinchID_array_clone[i]
          });
        }
        phinchID_map.sort(function(a, b) {
          return naturalSort(a.phinchName, b.phinchName);
        });
        for (i = o = 0, ref2 = selected_phinchID_array_clone.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
          sorted_selected_phinchID_array[i] = phinchID_map[i].index;
        }
      }
      vizdata = new Array(new_data_matrix_onLayer.length);
      sumEachTax = new Array(new_data_matrix_onLayer.length);
      sumEachCol = new Array(selected_samples_clone.length);
      for (i = p = 0, ref3 = new_data_matrix_onLayer.length - 1; 0 <= ref3 ? p <= ref3 : p >= ref3; i = 0 <= ref3 ? ++p : --p) {
        vizdata[i] = new Array(selected_samples_clone.length);
        sumEachTax[i] = 0;
        for (j = q = 0, ref4 = selected_samples_clone.length - 1; 0 <= ref4 ? q <= ref4 : q >= ref4; j = 0 <= ref4 ? ++q : --q) {
          order = selected_samples.indexOf(selected_samples_clone[j]);
          vizdata[i][j] = {};
          vizdata[i][j].taxID = i;
          vizdata[i][j].taxName = unique_taxonomy_comb_onLayer[i].join(",");
          vizdata[i][j].vizColInd = j;
          vizdata[i][j].bioColInd = selected_samples_clone[j];
          vizdata[i][j].sampleName = columns_sample_name_array[order];
          if (sortIdFlag) {
            vizdata[i][j].phinchName = String(selected_samples_clone[j]);
            if (sortDescFlag) {
              vizdata[i][j].sortColInd = selected_samples_clone.length - 1 - j;
            } else {
              vizdata[i][j].sortColInd = j;
            }
          } else {
            vizdata[i][j].sortColInd = sorted_selected_phinchID_array.indexOf(j);
            vizdata[i][j].phinchName = String(selected_phinchID_array_clone[j]);
          }
          if (deleteOTUArr.indexOf(i) === -1 && (new_data_matrix_onLayer[i][order] != null)) {
            vizdata[i][j].y = new_data_matrix_onLayer[i][order];
            sumEachTax[i] += new_data_matrix_onLayer[i][order];
          } else {
            vizdata[i][j].y = 0;
          }
        }
      }
      if (selected_samples_clone.length > 0) {
        for (i = t = 0, ref5 = selected_samples_clone.length - 1; 0 <= ref5 ? t <= ref5 : t >= ref5; i = 0 <= ref5 ? ++t : --t) {
          sumEachCol[i] = 0;
          order = selected_samples.indexOf(selected_samples_clone[i]);
          for (j = u = 0, ref6 = new_data_matrix_onLayer.length - 1; 0 <= ref6 ? u <= ref6 : u >= ref6; j = 0 <= ref6 ? ++u : --u) {
            vizdata[j][i].y0 = sumEachCol[i];
            if (deleteOTUArr.indexOf(j) === -1) {
              sumEachCol[i] += new_data_matrix_onLayer[j][order];
            }
          }
        }
      }
      width = 1200;
      height = sumEachCol.length * 14 + 200;
      max_single = d3.max(sumEachCol);
      margin = {
        top: 75,
        right: 20,
        bottom: 20,
        left: 100
      };
      x = d3.scale.ordinal().domain(vizdata[0].map(function(d) {
        return d.vizColInd;
      })).rangeRoundBands([0, height - margin.top - margin.bottom]);
      y = d3.scale.linear().domain([0, max_single]).range([0, width - margin.right - margin.left - 50]);
      svg = d3.select("#taxonomy_container").append("svg").attr("width", width).attr("height", height + 100).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      infoPanel = d3.select("#taxonomy_container").append("div").attr("class", "basicTooltip").style("visibility", "hidden");
      delePanel = d3.select("#taxonomy_container").append("div").attr("class", "hideSampleContainer").style("visibility", "hidden");
      taxonomy = svg.selectAll('g.taxonomy').data(vizdata).enter().append('g').attr('class', 'taxonomy').style('fill', function(d, i) {
        return fillCol[i % 20];
      }).on('mouseover', function(d, i) {
        var index;
        index = i;
        return d3.selectAll('g.taxonomy').style('fill', function(d, i) {
          if (i === index) {
            return fillCol[index % 20];
          } else {
            return d3.rgb(fillCol[i % 20]).darker();
          }
        }).style('opacity', function(d, i) {
          if (i !== index) {
            return 0.4;
          }
        });
      }).on('mouseout', function(d, i) {
        return d3.selectAll('g.taxonomy').style('fill', function(d, i) {
          return fillCol[i % 20];
        }).style('opacity', 1);
      });
      rect = taxonomy.selectAll('rect').data(Object).enter().append('rect').attr('class', function(d, i) {
        return 'sample_' + d.bioColInd;
      }).attr('height', 12).attr('y', function(d, i) {
        return 14 * d.sortColInd;
      }).attr('x', function(d, i) {
        if (isNaN(y(d.y0))) {
          return 0;
        } else if (!percentView) {
          return y(d.y0);
        } else {
          return y(d.y0) / sumEachCol[i] * max_single;
        }
      }).attr('width', function(d, i) {
        if (isNaN(y(d.y))) {
          return 0;
        } else if (!percentView) {
          return y(d.y);
        } else {
          return y(d.y) / sumEachCol[i] * max_single;
        }
      }).on('mouseover', function(d, i) {
        content = '';
        content += '<img class="PanelImg" src="css/images/tooltip.png">';
        content += '<div class="PanelHead">SAMPLE NAME:</br><span>' + d.sampleName + '</span><br/>TAXONOMY:</br><em>' + d.taxName + '</em></div>';
        content += '<div class="PanelInfo">TAXONOMY OCCURENCE IN THIS SAMPLE<br/><span>' + (d.y / sumEachCol[i] * 100).toFixed(2) + '%</span>&nbsp;&nbsp;<em>(' + format(d.y) + ' out of ' + format(sumEachCol[i]) + ')</em></div>';
        content += '<progress max="100" value="' + (d.y / sumEachCol[i] * 100).toFixed(2) + '"></progress>';
        content += '<div class="PanelInfo">OUT OF TOTAL TAXONOMY OCCURENCE IN ALL SAMPLES<br/><span>' + (d.y / sumEachTax[d.taxID] * 100).toFixed(2) + '%</span>&nbsp;&nbsp;<em>(' + format(d.y) + ' out of ' + format(sumEachTax[d.taxID]) + ')</em></div>';
        content += '<progress max="100" value="' + (d.y / sumEachTax[d.taxID] * 100).toFixed(2) + '"></progress>';
        content += '<br/><br/>';
        infoPanel.html(content);
        infoPanel.style({
          "visibility": "visible",
          top: (d3.event.pageY - 20) + "px",
          left: (d3.event.pageX + 25) + "px"
        });
        return delePanel.style({
          "visibility": "hidden"
        });
      }).on('mouseout', function(d, i) {
        return infoPanel.style({
          "visibility": "hidden"
        });
      }).on('contextmenu', function(d, i) {
        infoPanel.style({
          "visibility": "hidden"
        });
        delePanel.html('<div class="hideSample">HIDE SAMPLE</div>').style({
          "visibility": "visible",
          top: (d3.event.pageY + 15) + "px",
          left: (d3.event.pageX - 15) + "px"
        });
        return $('.hideSample').click(function() {
          deleteSampleArr.push(d.bioColInd);
          return that.drawTaxonomyBar();
        });
      });
      label = svg.append('g').selectAll('text').data(vizdata[0]).enter().append('text').text(function(d, i) {
        return d.phinchName.substring(0, 12);
      }).attr('class', function(d, i) {
        return 'sampleTxt_' + d.bioColInd;
      }).attr('x', -80).attr('y', function(d, i) {
        return 14 * d.sortColInd + 9;
      }).attr('text-anchor', 'start').attr("font-size", "10px").attr('fill', '#444').on('mouseout', function(d, i) {
        return d3.select('.sampleTxt_' + d.bioColInd).text(d.phinchName.substring(0, 12));
      }).on('mouseover', function(d, i) {
        return d3.select('.sampleTxt_' + d.bioColInd).text(d.phinchName);
      });
      svg.append("text").attr('y', -35).attr("font-size", "11px").text('Sequence Reads').attr('transform', function(d) {
        return "translate(" + y(max_single) / 2 + ", 0)";
      });
      rule = svg.selectAll('g.rule').data(y.ticks(10)).enter().append('g').attr('class', 'rule').attr('transform', function(d) {
        return "translate(" + y(d) + ", 0)";
      });
      rule.append('line').attr('y2', height - 180).style("stroke", function(d) {
        if (d) {
          return "#eee";
        } else {
          return "#444";
        }
      }).style("stroke-opacity", function(d) {
        if (d) {
          return 0.7;
        } else {
          return null;
        }
      });
      rule.append('text').attr('y', -15).attr("font-size", "9px").attr('text-anchor', 'middle').attr('fill', '#444').text(function(d, i) {
        if (!percentView) {
          return format(d);
        } else {
          return Math.round(i / (y.ticks(10).length - 1) * 100) + '%';
        }
      });
      legendArr = [];
      for (i = v = 0, ref7 = sumEachTax.length - 1; 0 <= ref7 ? v <= ref7 : v >= ref7; i = 0 <= ref7 ? ++v : --v) {
        temp = {
          'originalID': i,
          'value': sumEachTax[i],
          'name': unique_taxonomy_comb_onLayer[i].join(",")
        };
        legendArr.push(temp);
      }
      this.createLegend(legendArr);
      legendClone = _.clone(legendArr);
      legendClone.sort(function(a, b) {
        return b.value - a.value;
      });
      maxLegendItems = 10;
      if (legendClone.length > maxLegendItems) {
        legendClone.length = maxLegendItems;
      }
      gLegend = svg.selectAll('g.legend').data([0]);
      gLegend.enter().append('g').attr('class', 'legend');
      gLegend.append('text').text('Top 10 Sequences').attr('transform', 'translate(0' + ',' + (height - legendClone.length * 16 - 10 - 75 + 100) + ')');
      legendItem = gLegend.selectAll('g.legendItem').data(legendClone);
      legendItemEnter = legendItem.enter().append('g').attr('class', 'legendItem');
      legendItemEnter.attr('transform', function(d, i) {
        var xPos, yDiff, yPos;
        xPos = 0;
        yDiff = 16;
        yPos = height - legendClone.length * yDiff + i * yDiff - 75 + 100;
        return 'translate(' + xPos + ', ' + yPos + ')';
      });
      legendItemEnter.append('rect').attr('x', 0).attr('y', 0).attr('width', 12).attr('height', 12).style('fill', function(d, i) {
        return fillCol[d.originalID % 20];
      });
      legendItemEnter.append('text').text(function(d, i) {
        return d.name;
      }).attr('x', 14).attr('y', 12).style('font-size', '12px');
      divCont = '';
      if (!percentView) {
        for (i = z = 0, ref8 = sumEachCol.length - 1; 0 <= ref8 ? z <= ref8 : z >= ref8; i = 0 <= ref8 ? ++z : --z) {
          divCont += '<div class="fake" style="width:' + y(sumEachCol[i]) + 'px;"></div>';
        }
      } else {
        fakeArr = new Array(sumEachCol.length + 1);
        divCont = fakeArr.join('<div class="fake" style="width:' + y(max_single) + 'px;"></div>');
      }
      $('#fake_taxonomy_container').html(divCont);
      $('#viz_container').append('<canvas id="outline" width="180" height="' + (window.innerHeight - 280) + '"></canvas>');
      if (selected_samples.length > 80) {
        return $('#outline').fracs('outline', {
          crop: true,
          styles: [
            {
              selector: 'section',
              fillStyle: 'rgb(230,230,230)'
            }, {
              selector: '#header, #file_details, #autoCompleteList',
              fillStyle: 'rgb(68,68,68)'
            }, {
              selector: '.fake',
              fillStyle: 'rgb(36,36,36)'
            }
          ],
          viewportStyle: {
            fillStyle: 'rgba(29,119,194,0.3)'
          },
          viewportDragStyle: {
            fillStyle: 'rgba(29,119,194,0.4)'
          }
        });
      }
    };

    taxonomyViz.prototype.barFilterControl = function() {
      var availableTags, i, l, ref, searchList, that;
      if (document.addEventListener) {
        document.addEventListener('contextmenu', function(e) {
          return e.preventDefault();
        }, false);
      } else {
        document.addEventListener('oncontextmenu', function(e) {
          return window.event.returnValue = false;
        }, false);
      }
      that = this;
      searchList = [];
      availableTags = new Array(unique_taxonomy_comb_onLayer.length);
      for (i = l = 0, ref = unique_taxonomy_comb_onLayer.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        availableTags[i] = unique_taxonomy_comb_onLayer[i].join(",");
      }
      $('#tags').keydown(function() {
        if ($('#tags').val().length < 4) {
          return $('#autoCompleteList').fadeOut(200);
        }
      });
      $('#autoCompleteList').fadeOut(200);
      return $("#tags").autocomplete({
        source: availableTags,
        minLength: 3,
        response: function(evt, ui) {
          var content, n, o, ref1, ref2;
          $('#autoCompleteList').html("");
          searchList.length = 0;
          if (ui.content.length > 0) {
            for (i = n = 0, ref1 = ui.content.length - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; i = 0 <= ref1 ? ++n : --n) {
              searchList.push(ui.content[i].value);
            }
            content = '<i class="icon-remove icon-large" style="float:right; margin: 5px 10px 0 0;" id = "iconRemover"></i><ul>';
            for (i = o = 0, ref2 = searchList.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
              if (deleteOTUArr.indexOf(i) !== -1) {
                content += '<li><span style = "display:block; background-color:#aaa; height: 12px; width: 12px; float: left; margin: 2px 0px;" ></span>&nbsp;&nbsp;';
                content += searchList[i] + '&nbsp;&nbsp;<em id="search_' + i + '">show</em></li>';
              } else {
                content += '<li><span style = "display:block; background-color:' + fillCol[availableTags.indexOf(searchList[i]) % 20] + '; height: 12px; width: 12px; float: left; margin: 2px 0px;" ></span>&nbsp;&nbsp;';
                content += searchList[i] + '&nbsp;&nbsp;<em id="search_' + i + '">hide</em></li>';
              }
            }
            content += '</ul>';
            $('#autoCompleteList').append(content);
            $('#autoCompleteList ul li').each(function(index) {
              $(this).mouseout(function() {
                return d3.selectAll('g.taxonomy').filter(function(d, i) {
                  return i === index;
                }).style('fill', fillCol[index % 20]);
              });
              $(this).mouseover(function() {
                return d3.selectAll('g.taxonomy').filter(function(d, i) {
                  return i === index;
                }).style('fill', d3.rgb(fillCol[index % 20]).darker());
              });
              return $(this).click(function() {
                if ($('#search_' + index).html() === 'hide') {
                  $('#search_' + index).html('show');
                  $(this).find('span').css('background-color', '#aaa').css('color', '#aaa');
                  deleteOTUArr.push(index);
                } else {
                  $('#search_' + index).html('hide');
                  $(this).find('span').css('background-color', fillCol[index % 20]).css('color', '#000');
                  deleteOTUArr.splice(deleteOTUArr.indexOf(index), 1);
                }
                return that.drawTaxonomyBar();
              });
            });
            $('#iconRemover').click(function() {
              return $('#autoCompleteList').fadeOut(200);
            });
            return $('#autoCompleteList').show();
          } else {
            $('#autoCompleteList').html("");
            return $('#autoCompleteList').hide();
          }
        }
      });
    };

    taxonomyViz.prototype.drawTaxonomyBubble = function() {
      var adjust_max, adjust_min, bubbleRemover, comb_name_list, force, height, i, infoPanel, j, l, margin, maxRowHeight, max_single, n, node, nodes, o, p, radius_scale, ref, ref1, ref2, ref3, svg, tooltip, viz_series, width;
      max_single = 0;
      vizdata = new Array(unique_taxonomy_comb_onLayer.length);
      viz_series = new Array(unique_taxonomy_comb_onLayer.length);
      comb_name_list = new Array(unique_taxonomy_comb_onLayer.length);
      for (i = l = 0, ref = new_data_matrix_onLayer.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        vizdata[i] = 0;
        viz_series[i] = new Array(selected_samples.length);
        comb_name_list[i] = unique_taxonomy_comb_onLayer[i].join(",");
        for (j = n = 0, ref1 = selected_samples.length - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; j = 0 <= ref1 ? ++n : --n) {
          if (new_data_matrix_onLayer[i][selected_samples[j]] != null) {
            vizdata[i] += new_data_matrix_onLayer[i][selected_samples[j]];
            viz_series[i][j] = new_data_matrix_onLayer[i][selected_samples[j]];
            if (viz_series[i][j] > max_single) {
              max_single = viz_series[i][j];
            }
          }
        }
      }
      width = 1000;
      height = 160 + LayerID * 120;
      margin = {
        top: 75,
        right: 20,
        bottom: 20,
        left: 50
      };
      svg = d3.select("#taxonomy_container").append("svg").attr("width", width).attr("height", height).attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      tooltip = d3.select("#taxonomy_container").append("div").attr("class", 'basicTooltip').style("visibility", "hidden");
      infoPanel = d3.select("#taxonomy_container").append("div").attr("id", "bubblePanel").style("visibility", "hidden");
      bubbleRemover = d3.select("#taxonomy_container").append('div').attr('id', "bubbleRemover").style("visibility", "hidden").html('<i class="icon-remove icon-large"></i>');
      $('#bubbleSliderLeft').html(Math.max(1, d3.min(vizdata)));
      $('#bubbleSliderRight').html(d3.max(vizdata));
      $('#bubbleSlider').slider({
        range: true,
        min: Math.max(1, d3.min(vizdata)),
        max: d3.max(vizdata),
        values: [1, d3.max(vizdata)],
        slide: (function(_this) {
          return function(event, ui) {
            $('#bubbleSliderLeft').html(ui.values[0]);
            $('#bubbleSliderRight').html(ui.values[1]);
            return d3.selectAll('.node').transition().duration(250).ease("quad").style('opacity', function(d, i) {
              if (d.value < ui.values[0] || d.value > ui.values[1]) {
                return 0;
              } else {
                return 0.6;
              }
            });
          };
        })(this)
      });
      adjust_min = 1;
      adjust_max = d3.max(vizdata) + 1;
      radius_scale = d3.scale.pow().exponent(0.25).domain([adjust_min, adjust_max]).range([2, 50]);
      nodes = [];
      for (i = o = 0, ref2 = new_data_matrix_onLayer.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
        if (vizdata[i] > adjust_min && vizdata[i] < adjust_max) {
          nodes.push({
            id: i,
            radius: radius_scale(vizdata[i]),
            value: vizdata[i],
            name: comb_name_list[i],
            x: Math.random() * width,
            y: Math.random() * height
          });
        }
      }
      if (bubbleView) {
        force = d3.layout.force().charge(function(d) {
          return -Math.pow(d.radius, 2.0) / 8;
        }).nodes(nodes).on("tick", function(e) {
          return node.attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        }).size([200 + LayerID * 120, 160 + LayerID * 120]).start();
      } else if (!bubbleView && nodes.length > 0) {
        nodes.sort(function(a, b) {
          return b.value - a.value;
        });
        nodes[0].x = 100;
        nodes[0].y = 100;
        maxRowHeight = 50;
        for (i = p = 1, ref3 = nodes.length - 1; 1 <= ref3 ? p <= ref3 : p >= ref3; i = 1 <= ref3 ? ++p : --p) {
          nodes[i].x = nodes[i - 1].x + nodes[i - 1].radius + nodes[i].radius + 20;
          nodes[i].y = nodes[i - 1].y;
          if (nodes[i].x > 850) {
            nodes[i].x = 50 + nodes[i].radius;
            nodes[i].y += 40 + nodes[i].radius + maxRowHeight;
            maxRowHeight = nodes[i].radius;
          }
        }
        svg.attr("height", nodes[nodes.length - 1].y + 50);
      }
      node = svg.selectAll(".node").data(nodes).enter().append("circle").attr("class", "node").attr("id", function(d) {
        return "bub_" + d.id;
      }).attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      }).attr("r", function(d) {
        return d.radius;
      }).style("fill", function(d, i) {
        return fillCol[d.id % 20];
      }).style({
        opacity: '0.6',
        stroke: 'none'
      }).on('mouseover', function(d, i) {
        d3.select(this).style({
          opacity: '1',
          stroke: '#000',
          'stroke-width': '3'
        });
        tooltip.html("<img class = 'PanelImg' src='css/images/tooltip.png'><div class = 'PanelHead'>TAXONOMY:<br/><em>" + d.name + "</em></div><div class = 'PanelHead'><div class='PanelHalf'>TOTAL READS:<br/><span>" + format(d.value) + "</span></div><div class='PanelHalf'>OTU QUANTITY:<br/><span>" + format(taxonomy_comb_count_onLayer[i]) + "</span></div></div>");
        return tooltip.style({
          "visibility": "visible",
          top: (d3.event.pageY - 20) + "px",
          left: (d3.event.pageX + 30) + "px"
        });
      }).on('mouseout', function(d) {
        d3.select(this).style({
          opacity: '0.6',
          stroke: 'none'
        });
        return tooltip.style("visibility", "hidden");
      }).on('click', function(d, i) {
        var barrect, circleUnderMouse, curColor, txtrect, valrect, y;
        tooltip.style("display", "none");
        if (bubbleView) {
          force.stop();
        }
        circleUnderMouse = this;
        d3.select(this).transition().attr('cx', '100').attr('cy', '100').duration(250).ease("quad-in-out");
        d3.selectAll(".node").filter(function(d, i) {
          return this !== circleUnderMouse;
        }).transition().attr('r', '0').duration(250).delay(250).ease("quad-in-out");
        y = d3.scale.linear().domain([0, d3.max(viz_series[d.id])]).range([1, 85]);
        infoPanel.style("visibility", "visible");
        bubbleRemover.style("visibility", 'visible');
        curColor = d3.select(this).style("fill");
        if (d.name.length < 90) {
          infoPanel.html('<div class="bubbleTaxHeader">' + d.name + '<div class="descInfo"><span>' + format(d3.sum(viz_series[d.id])) + '</span>&nbsp;&nbsp;READS&nbsp;&nbsp;&nbsp;SAMPLE DIST</div></div><svg width="813px" style="float: right; padding: 0 20px; border: 1px solid #c8c8c8; border-top: none;" height="' + Math.ceil(viz_series[d.id].length / 5 + 1) * 25 + '"></svg>');
        } else {
          infoPanel.html('<div class="bubbleTaxHeader"><div class = "descName">' + d.name + '</div><div class="descInfo"><span>' + format(d3.sum(viz_series[d.id])) + '</span>&nbsp;&nbsp;READS&nbsp;&nbsp;&nbsp;SAMPLE DIST</div></div><svg width="813px" style="float: right; padding: 0 20px; border: 1px solid #c8c8c8; border-top: none;" height="' + Math.ceil(viz_series[d.id].length / 5 + 1) * 25 + '"></svg>');
        }
        barrect = infoPanel.select('svg').selectAll('rect').data(viz_series[d.id]);
        valrect = infoPanel.select('svg').selectAll('text').data(viz_series[d.id]);
        txtrect = infoPanel.select('svg').selectAll('text').data(selected_samples);
        txtrect.enter().append('text').text(function(d, i) {
          return String(selected_phinchID_array[i]).substr(-15);
        }).attr("x", function(d, i) {
          return ((i % 5) * 160 + 82) + 'px';
        }).attr("y", function(d, i) {
          return 25 * Math.floor(i / 5) + 30 + 'px';
        }).attr("text-anchor", 'end').attr("font-size", "9px");
        barrect.enter().append('rect').attr('height', '15px').attr('width', '85px').attr("x", function(d, i) {
          return ((i % 5) * 160 + 85) + 'px';
        }).attr("y", function(d, i) {
          return 25 * Math.floor(i / 5) + 20 + 'px';
        }).style("fill", '#f2f2f2');
        barrect.enter().append('rect').attr('height', '15px').attr('width', function(d) {
          return y(d);
        }).attr("x", function(d, i) {
          return ((i % 5) * 160 + 85) + 'px';
        }).attr("y", function(d, i) {
          return 25 * Math.floor(i / 5) + 20 + 'px';
        }).style("fill", curColor);
        return valrect.enter().append('text').text(function(d, i) {
          return format(d);
        }).attr("x", function(d, i) {
          return ((i % 5) * 160 + 165) + 'px';
        }).attr("y", function(d, i) {
          return 25 * Math.floor(i / 5) + 31 + 'px';
        }).attr("text-anchor", 'end').attr("font-size", "10px").attr("fill", "#555");
      });
      return d3.select('#bubbleRemover').on('click', function(d) {
        tooltip.style("display", "block");
        infoPanel.style("visibility", "hidden");
        bubbleRemover.style("visibility", 'hidden');
        if (bubbleView) {
          force.resume();
        }
        return d3.selectAll(".node").transition().style({
          opacity: '0.7',
          stroke: 'none'
        }).attr("cx", function(d) {
          return d.x;
        }).attr("cy", function(d) {
          return d.y;
        }).attr('r', function(d) {
          return d.radius;
        }).duration(250).ease("quad");
      });
    };

    taxonomyViz.prototype.calculateOTUonLayer = function() {
      var comb_name_list, i, j, l, matchInd, matchStr, n, o, p, ref, ref1, ref2, ref3, results1;
      comb_name_list = new Array(unique_taxonomy_comb_onLayer.length);
      taxonomy_comb_count_onLayer = new Array(unique_taxonomy_comb_onLayer.length);
      for (i = l = 0, ref = unique_taxonomy_comb_onLayer.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        comb_name_list[i] = "";
        for (j = n = 0, ref1 = LayerID - 2; 0 <= ref1 ? n <= ref1 : n >= ref1; j = 0 <= ref1 ? ++n : --n) {
          comb_name_list[i] += unique_taxonomy_comb_onLayer[i][j] + ",";
        }
        comb_name_list[i] += unique_taxonomy_comb_onLayer[i][LayerID - 1];
        taxonomy_comb_count_onLayer[i] = 0;
      }
      results1 = [];
      for (i = o = 0, ref2 = unique_taxonomy_comb.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
        matchStr = "";
        for (j = p = 0, ref3 = LayerID - 2; 0 <= ref3 ? p <= ref3 : p >= ref3; j = 0 <= ref3 ? ++p : --p) {
          matchStr += unique_taxonomy_comb[i][j] + ",";
        }
        matchStr += unique_taxonomy_comb[i][LayerID - 1];
        matchInd = comb_name_list.indexOf(matchStr);
        if (matchInd !== -1) {
          results1.push(taxonomy_comb_count_onLayer[matchInd] += unique_taxonomy_comb_count[i]);
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };

    taxonomyViz.prototype.bubbleFilterControl = function() {
      var availableTags, i, l, ref, searchList, that;
      that = this;
      searchList = [];
      availableTags = new Array(unique_taxonomy_comb_onLayer.length);
      for (i = l = 0, ref = unique_taxonomy_comb_onLayer.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        availableTags[i] = unique_taxonomy_comb_onLayer[i].join(",");
      }
      $('#tags').keydown(function() {
        if ($('#tags').val().length < 4) {
          return $('#autoCompleteList').fadeOut(200);
        }
      });
      $('#autoCompleteList').fadeOut(800);
      return $("#tags").autocomplete({
        source: availableTags,
        minLength: 3,
        response: function(evt, ui) {
          var content, n, o, ref1, ref2;
          $('#autoCompleteList').html("");
          searchList.length = 0;
          if (ui.content.length > 0) {
            for (i = n = 0, ref1 = ui.content.length - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; i = 0 <= ref1 ? ++n : --n) {
              searchList.push(ui.content[i].value);
            }
            content = '<i class="icon-remove icon-large" style="float:right; margin: 5px 10px 0 0;" id = "iconRemover"></i><ul>';
            for (i = o = 0, ref2 = searchList.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
              content += '<li><span style = "display:block; background-color:' + fillCol[availableTags.indexOf(searchList[i]) % 20] + '; height: 12px; width: 12px; float: left; margin: 2px 0px;" ></span>&nbsp;&nbsp;' + searchList[i] + '</li>';
            }
            content += '</ul>';
            $('#autoCompleteList').append(content);
            $('#autoCompleteList ul li').each(function(index) {
              $(this).mouseout(function() {
                var newIndex;
                newIndex = availableTags.indexOf($(this)[0].innerText.replace(/\s+/g, ''));
                return d3.select('#bub_' + newIndex).style({
                  opacity: '0.6',
                  stroke: 'none'
                });
              });
              return $(this).mouseover(function() {
                var newIndex;
                newIndex = availableTags.indexOf($(this)[0].innerText.replace(/\s+/g, ''));
                return d3.select('#bub_' + newIndex).style({
                  opacity: '1',
                  stroke: '#000',
                  'stroke-width': '3'
                });
              });
            });
            $('#iconRemover').click(function() {
              return $('#autoCompleteList').fadeOut(200);
            });
            return $('#autoCompleteList').show();
          } else {
            $('#autoCompleteList').html("");
            return $('#autoCompleteList').hide();
          }
        }
      });
    };

    taxonomyViz.prototype.drawTaxonomySankey = function() {
      var height, i, infoPanel, j, l, len, len1, link, linkExist, margin, maxNodeAbsValue, n, node, nodesArr, o, p, path, q, ref, ref1, ref2, ref3, ref4, ref5, sankey, svg, t, taxonomySankey, tempLink, width, yScale;
      nodesArr = [];
      taxonomySankey = {
        'nodes': [],
        'links': []
      };
      sumEachTax = new Array(unique_taxonomy_comb_onLayer.length);
      if (unique_taxonomy_comb_onLayer.length > 0) {
        for (i = l = 0, ref = unique_taxonomy_comb_onLayer.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
          sumEachTax[i] = 0;
          for (j = n = 0, ref1 = selected_samples.length - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; j = 0 <= ref1 ? ++n : --n) {
            if (new_data_matrix_onLayer[i][selected_samples[j]] != null) {
              sumEachTax[i] += new_data_matrix_onLayer[i][selected_samples[j]];
            }
          }
        }
        for (i = o = 0, ref2 = unique_taxonomy_comb_onLayer.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
          for (j = p = 0, ref3 = LayerID - 1; 0 <= ref3 ? p <= ref3 : p >= ref3; j = 0 <= ref3 ? ++p : --p) {
            if (nodesArr.indexOf(unique_taxonomy_comb_onLayer[i][j]) === -1) {
              nodesArr.push(unique_taxonomy_comb_onLayer[i][j]);
              taxonomySankey.nodes.push({
                'name': unique_taxonomy_comb_onLayer[i][j]
              });
            }
            if (j > 0) {
              linkExist = false;
              tempLink = {
                'source': nodesArr.indexOf(unique_taxonomy_comb_onLayer[i][j - 1]),
                'target': nodesArr.indexOf(unique_taxonomy_comb_onLayer[i][j]),
                'absValue': sumEachTax[i]
              };
              ref4 = taxonomySankey.links;
              for (q = 0, len = ref4.length; q < len; q++) {
                link = ref4[q];
                if (link.source === tempLink.source && link.target === tempLink.target) {
                  link.absValue += sumEachTax[i];
                  linkExist = true;
                }
              }
              if (!linkExist) {
                taxonomySankey.links.push(tempLink);
              }
            }
          }
        }
        maxNodeAbsValue = d3.max(taxonomySankey.links, function(d, i) {
          return d.absValue;
        });
        yScale = d3.scale.linear().domain([0, maxNodeAbsValue]).range([0, 10]);
        ref5 = taxonomySankey.links;
        for (t = 0, len1 = ref5.length; t < len1; t++) {
          link = ref5[t];
          link.value = link.absValue;
        }
      }
      width = 1200;
      height = 20 * unique_taxonomy_comb_onLayer.length;
      margin = {
        top: 40,
        right: 10,
        bottom: 20,
        left: 20
      };
      svg = d3.select("#taxonomy_container").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      infoPanel = d3.select("#taxonomy_container").append("div").attr("id", "sankeyInfo").style({
        "opacity": 0,
        "z-index": -1
      });
      sankey = d3.sankey().size([width - 200, height - 100]).nodeWidth(15).nodePadding(10).nodes(taxonomySankey.nodes).links(taxonomySankey.links).layout(32, width - 200);
      path = sankey.link();
      link = svg.append("g").selectAll(".link").data(taxonomySankey.links).enter().append("path").attr("class", "link").attr("d", path).style('fill', function(d, i) {
        return globalColoring(d.target.name);
      }).style("opacity", 0.3).sort(function(a, b) {
        return b.dy - a.dy;
      });
      node = svg.append("g").selectAll(".node").data(taxonomySankey.nodes).enter().append("g").attr("class", function(d) {
        if (isNaN(d.y)) {
          return 'nullnode';
        } else {
          return 'node';
        }
      }).style('display', function(d) {
        if (isNaN(d.y)) {
          return 'none';
        } else {
          return 'block';
        }
      }).attr("transform", function(d) {
        if (!isNaN(d.y)) {
          return "translate(" + d.x + "," + d.y + ")";
        } else {
          return "translate(" + d.x + ", 1)";
        }
      });
      node.append("rect").attr('x', 0).attr('y', 0).attr("height", function(d) {
        if (d.dy < 2 || isNaN(d.dy)) {
          return 2;
        } else {
          return d.dy;
        }
      }).attr("width", sankey.nodeWidth()).style("fill", function(d, i) {
        return globalColoring(d.name);
      }).style("opacity", 0.6).on("click", (function(_this) {
        return function(d, i) {
          return _this.clickLargeSnakeyNode(d, i, taxonomySankey, svg);
        };
      })(this));
      node.append("text").attr("x", -6).attr("y", function(d) {
        if (isNaN(d.dy)) {
          return 1;
        } else {
          return d.dy / 2;
        }
      }).attr("dy", ".35em").attr("text-anchor", "end").attr("transform", null).attr("font-size", "10px").text(function(d) {
        return d.name;
      }).filter(function(d) {
        return d.x < width / 2;
      }).attr("x", 6 + sankey.nodeWidth()).attr("text-anchor", "start");
      return this.sankeyFilterControl(nodesArr, taxonomySankey, svg);
    };

    taxonomyViz.prototype.clickLargeSnakeyNode = function(d, i, taxonomySankey, svg) {
      var content, infoPanel, k, l, ref, sourceTotal;
      infoPanel = d3.select("#taxonomy_container #sankeyInfo");
      content = "<div class='sankeyInfobox'><div id='sankeyRemover'><i class='icon-remove icon-large'></i></div>";
      if (d.targetLinks.length === 0) {
        content += "<p><b>" + d.name + "</b> is a source node. It has <b>" + format(d.sourceLinks.length) + "</b> branches.</p><p>Their distributions are: </p>";
      } else if (d.sourceLinks.length === 0) {
        content += "<p><b>" + d.name + "</b> is an end node. Its absolute reads is <b>" + format(d.targetLinks[0].absValue) + "</b>.</p></div>";
      } else {
        sourceTotal = 0;
        for (k = l = 0, ref = d.sourceLinks.length - 1; 0 <= ref ? l <= ref : l >= ref; k = 0 <= ref ? ++l : --l) {
          sourceTotal += d.sourceLinks[k].absValue;
        }
        content += "<p><b>" + d.name + "</b> has <b>" + format(d.sourceLinks.length) + "</b> branches. Its total reads is <b>" + format(sourceTotal) + "</b>.</p><p>Their distributions are: </p>";
      }
      content += "</div>";
      infoPanel.html(content);
      this.drawSmallSankey(infoPanel, d, taxonomySankey, svg);
      svg.transition().duration(250).ease("quad-in-out").style({
        "opacity": 0,
        "z-index": -1
      });
      infoPanel.style('z-index', 4).transition().duration(250).ease("quad-in-out").style({
        "opacity": 1
      });
      return $('#sankeyRemover').click(function() {
        infoPanel.transition().duration(250).ease("quad-in-out").style({
          "opacity": 0,
          "z-index": -1
        });
        return svg.transition().duration(250).ease("quad-in-out").style({
          "opacity": 1,
          "z-index": 1
        });
      });
    };

    taxonomyViz.prototype.drawSmallSankey = function(div, targetNode, originalSankey, originalSVG) {
      var acceptableHeight, divHeight, divLarge, l, len, len1, link, maxDivHeight, maxNodesOnSide, minHeight, n, node, nodeHeight, path, ref, ref1, smallSankey, smallSankeyDimensions, smallSankeySVG, smlTaxonomySankey, targetHeight;
      smlTaxonomySankey = {
        'nodes': [],
        'links': []
      };
      smlTaxonomySankey.nodes.push(_.clone(targetNode));
      minHeight = 500;
      targetHeight = 500;
      maxNodesOnSide = 1;
      if (targetNode.targetLinks.length > maxNodesOnSide) {
        maxNodesOnSide = targetNode.targetLinks.length;
      }
      if (targetNode.sourceLinks.length > maxNodesOnSide) {
        maxNodesOnSide = targetNode.sourceLinks.length;
      }
      ref = targetNode.targetLinks;
      for (l = 0, len = ref.length; l < len; l++) {
        node = ref[l];
        smlTaxonomySankey.nodes.push(_.clone(node.source));
        link = {
          source: smlTaxonomySankey.nodes.length - 1,
          target: 0,
          value: node.absValue
        };
        smlTaxonomySankey.links.push(link);
      }
      ref1 = targetNode.sourceLinks;
      for (n = 0, len1 = ref1.length; n < len1; n++) {
        node = ref1[n];
        smlTaxonomySankey.nodes.push(_.clone(node.target));
        link = {
          source: 0,
          target: smlTaxonomySankey.nodes.length - 1,
          value: node.absValue
        };
        smlTaxonomySankey.links.push(link);
      }
      nodeHeight = 12;
      acceptableHeight = maxNodesOnSide * nodeHeight;
      if (acceptableHeight > targetHeight) {
        targetHeight = acceptableHeight;
      }
      divHeight = targetHeight + 80;
      maxDivHeight = 600;
      divLarge = false;
      if (divHeight > maxDivHeight) {
        divHeight = maxDivHeight;
        divLarge = true;
      }
      d3.select('.sankeyInfobox').style('height', divHeight + 'px').style('overflow-y', function() {
        if (divLarge) {
          return 'scroll';
        } else {
          return 'visible';
        }
      });
      smallSankeyDimensions = {
        w: 600,
        h: targetHeight
      };
      smallSankeySVG = div.select('.sankeyInfobox').append('svg').attr('width', smallSankeyDimensions.w).attr('height', smallSankeyDimensions.h);
      smallSankey = d3.sankey().size([smallSankeyDimensions.w, smallSankeyDimensions.h - 10]).nodeWidth(15).nodePadding(10).nodes(smlTaxonomySankey.nodes).links(smlTaxonomySankey.links).layout(128, smallSankeyDimensions.w);
      path = smallSankey.link();
      link = smallSankeySVG.append('g').selectAll('.link').data(smlTaxonomySankey.links);
      link.enter().append('path').attr('class', 'link').style("opacity", 0.2);
      link.attr('d', path).style('fill', function(d) {
        return globalColoring(d.target.name);
      }).sort(function(a, b) {
        return b.dy - a.dy;
      });
      node = smallSankeySVG.append('g').selectAll('.node').data(smlTaxonomySankey.nodes).enter().append("g").attr("class", function(d) {
        if (isNaN(d.y)) {
          return 'nullnode';
        } else {
          return 'node';
        }
      }).attr("transform", function(d) {
        if (!isNaN(d.y)) {
          return "translate(" + d.x + "," + d.y + ")";
        }
      });
      node.append("rect").attr("height", function(d) {
        return Math.max(2, d.dy);
      }).attr("width", smallSankey.nodeWidth()).style("fill", function(d, i) {
        return globalColoring(d.name);
      }).on('click', (function(_this) {
        return function(d, i) {
          return _this.clickSmallSankeyNode(d, i, originalSankey, originalSVG);
        };
      })(this)).style("opacity", 0.6).attr('x', 0).attr('y', 0);
      node.append('rect').style('pointer-events', 'none').attr('y', function(d) {
        return d.dy - d.fillHeight;
      }).attr('width', smallSankey.nodeWidth()).style('fill', 'rgba(255,255,255,0.8)').attr('height', function(d) {
        var originalNode, ratio;
        originalNode = _.filter(originalSankey.nodes, function(dd) {
          return dd.name === d.name;
        });
        if (originalNode.length > 1) {
          console.error('more than one matching node');
          console.error(originalNode);
        }
        originalNode = originalNode[0];
        ratio = 1 - d.value / originalNode.value;
        if (d.dy < 2) {
          d.fillHeight = 2;
        } else {
          d.fillHeight = d.dy * ratio;
        }
        return d.fillHeight;
      });
      return node.append('text').attr("x", -6).attr("y", function(d) {
        return d.dy / 2;
      }).attr("dy", ".35em").attr("font-size", "10px").attr("text-anchor", "end").attr("transform", null).text(function(d) {
        return d.name;
      }).filter(function(d) {
        return d.x < width / 2;
      }).attr("x", 6 + smallSankey.nodeWidth()).attr("text-anchor", "start");
    };

    taxonomyViz.prototype.clickSmallSankeyNode = function(d, i, originalSankey, originalSVG) {
      var originalData;
      originalData = _.filter(originalSankey.nodes, function(dd) {
        return dd.name === d.name;
      });
      if (originalData.length > 1) {
        console.error('more than one matching node found');
        console.error(originalData);
      } else {
        originalData = originalData[0];
      }
      return this.clickLargeSnakeyNode(originalData, i, originalSankey, originalSVG);
    };

    taxonomyViz.prototype.sankeyFilterControl = function(_nodesArr, taxonomySankey, svg) {
      var availableTags, i, l, nodesArr, ref, searchList, that;
      that = this;
      searchList = [];
      nodesArr = _nodesArr;
      availableTags = new Array(nodesArr.length);
      for (i = l = 0, ref = nodesArr.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        availableTags[i] = nodesArr[i];
      }
      $('#tags').keydown(function() {
        if ($('#tags').val().length < 4) {
          return $('#autoCompleteList').fadeOut(200);
        }
      });
      $('#autoCompleteList').fadeOut(200);
      return $("#tags").autocomplete({
        source: availableTags,
        minLength: 3,
        response: function(evt, ui) {
          var content, n, o, ref1, ref2;
          $('#autoCompleteList').html("");
          searchList.length = 0;
          if (ui.content.length > 0) {
            for (i = n = 0, ref1 = ui.content.length - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; i = 0 <= ref1 ? ++n : --n) {
              searchList.push(ui.content[i].value);
            }
            content = '<i class="icon-remove icon-large" style="float:right; margin-right: 5px;" id = "iconRemover"></i><ul>';
            for (i = o = 0, ref2 = searchList.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
              content += '<li><span style = "display:block; background-color:' + globalColoring(searchList[i]) + '; height: 12px; width: 12px; float: left; margin: 2px 0px;" ></span>&nbsp;&nbsp;';
              content += searchList[i] + '</li>';
            }
            content += '</ul>';
            $('#autoCompleteList').append(content);
            $('#autoCompleteList ul li').each(function(index) {
              return $(this).click(function() {
                var m, p, ref3, results1;
                results1 = [];
                for (m = p = 0, ref3 = taxonomySankey.nodes.length - 1; 0 <= ref3 ? p <= ref3 : p >= ref3; m = 0 <= ref3 ? ++p : --p) {
                  if (taxonomySankey.nodes[m].name === $(this)[0].textContent.substr(2)) {
                    results1.push(that.clickLargeSnakeyNode(taxonomySankey.nodes[m], m, taxonomySankey, svg));
                  } else {
                    results1.push(void 0);
                  }
                }
                return results1;
              });
            });
            $('#iconRemover').click(function() {
              return $('#autoCompleteList').fadeOut(200);
            });
            return $('#autoCompleteList').show();
          } else {
            $('#autoCompleteList').html("");
            return $('#autoCompleteList').hide();
          }
        }
      });
    };

    taxonomyViz.prototype.drawTaxonomyDonuts = function(cur_attribute) {
      var alphagroupble_array, arr_id, count, donutArr, groupable_array, i, j, l, maxCount, n, o, p, q, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, results1, selected_new_data_matrix_onLayer, t, u, v, z;
      d3.select('#taxonomy_container').html("");
      groupable_array = [];
      for (i = l = 0, ref = selected_samples.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        if (groupable_array.indexOf(biom.columns[i].metadata[cur_attribute]) === -1) {
          groupable_array.push(biom.columns[i].metadata[cur_attribute]);
        }
      }
      count = new Array(groupable_array.length);
      for (i = n = 0, ref1 = groupable_array.length - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; i = 0 <= ref1 ? ++n : --n) {
        count[i] = [];
      }
      selected_new_data_matrix_onLayer = new Array(new_data_matrix_onLayer.length);
      for (i = o = 0, ref2 = new_data_matrix_onLayer.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
        selected_new_data_matrix_onLayer[i] = new Array(groupable_array.length);
        for (j = p = 0, ref3 = groupable_array.length - 1; 0 <= ref3 ? p <= ref3 : p >= ref3; j = 0 <= ref3 ? ++p : --p) {
          selected_new_data_matrix_onLayer[i][j] = 0;
        }
        for (j = q = 0, ref4 = selected_samples.length - 1; 0 <= ref4 ? q <= ref4 : q >= ref4; j = 0 <= ref4 ? ++q : --q) {
          arr_id = groupable_array.indexOf(biom.columns[j].metadata[cur_attribute]);
          selected_new_data_matrix_onLayer[i][arr_id] += new_data_matrix_onLayer[i][j];
        }
      }
      for (i = t = 0, ref5 = selected_samples.length - 1; 0 <= ref5 ? t <= ref5 : t >= ref5; i = 0 <= ref5 ? ++t : --t) {
        count[groupable_array.indexOf(biom.columns[i].metadata[cur_attribute])].push(i);
      }
      maxCount = 0;
      for (i = u = 0, ref6 = count.length - 1; 0 <= ref6 ? u <= ref6 : u >= ref6; i = 0 <= ref6 ? ++u : --u) {
        if (count[i].length > maxCount) {
          maxCount = count[i].length;
        }
      }
      d3.select('#taxonomy_container').append('svg').attr("width", maxCount * 20 + 450).attr("height", 290 * groupable_array.length + 200);
      alphagroupble_array = _.clone(groupable_array).sort();
      results1 = [];
      for (i = v = 0, ref7 = groupable_array.length - 1; 0 <= ref7 ? v <= ref7 : v >= ref7; i = 0 <= ref7 ? ++v : --v) {
        donutArr = [];
        for (j = z = 0, ref8 = selected_new_data_matrix_onLayer.length - 1; 0 <= ref8 ? z <= ref8 : z >= ref8; j = 0 <= ref8 ? ++z : --z) {
          donutArr.push(selected_new_data_matrix_onLayer[j][i]);
        }
        results1.push(this.drawBasicDonut(i, groupable_array[i], donutArr, count[i], alphagroupble_array.indexOf(groupable_array[i])));
      }
      return results1;
    };

    taxonomyViz.prototype.drawBasicDonut = function(donutID, donutName, donutData, donutContainedSamp, posID) {
      var arc, g, infoPanel, pie, radius, svg, that, yScale;
      radius = 100;
      yScale = d3.scale.pow().exponent(.4).domain([0, d3.max(donutData)]).range([0, 100]);
      arc = d3.svg.arc().innerRadius(50).outerRadius(radius);
      pie = d3.layout.pie().sort(null).value(function(d) {
        return yScale(d);
      });
      d3.select('#taxonomy_container').append('div').attr('class', 'donutSwitch').style('top', 250 + posID * 290 + 'px').html('<button id="toggleDy_' + donutID + '" class="clicked">Dynamic</button><button id = "toggleSt_' + donutID + '">Stand.</button>');
      $('#toggleDy_' + donutID).click((function(_this) {
        return function() {
          if (!$('#toggleDy_' + donutID).hasClass('clicked')) {
            $('#toggleDy_' + donutID).addClass('clicked');
            $('#toggleSt_' + donutID).removeClass('clicked');
            return _this.drawBasicRect(true, donutContainedSamp, donutID, null, 'dynamic');
          }
        };
      })(this));
      $('#toggleSt_' + donutID).click((function(_this) {
        return function() {
          if (!$('toggleSt_' + donutID).hasClass('clicked')) {
            $('#toggleSt_' + donutID).addClass('clicked');
            $('#toggleDy_' + donutID).removeClass('clicked');
            return _this.drawBasicRect(true, donutContainedSamp, donutID, null, 'standardized');
          }
        };
      })(this));
      d3.select('#taxonomy_container svg').append('g').attr("id", "donut_" + donutID).attr("transform", "translate(" + 125 + "," + (150 + posID * 290) + ")");
      svg = d3.select('#donut_' + donutID).append('g').attr("width", 300).attr("height", 255);
      infoPanel = d3.select("#taxonomy_container").append("div").attr("class", "basicTooltip").style("visibility", "hidden");
      that = this;
      g = svg.selectAll(".arc").data(pie(donutData)).enter().append("g").attr('class', 'arc_' + donutID);
      g.append("path").attr('d', arc).style('fill', function(d, i) {
        return fillCol[i % 20];
      }).on('mouseover', function(d, i) {
        var content, index;
        index = i;
        d3.selectAll('g.arc_' + donutID).style('opacity', function(d, i) {
          if (i !== index) {
            return 0.5;
          }
        });
        content = '';
        content += '<img class="PanelImg" src="css/images/tooltip.png">';
        content += '<div class="PanelHead">TAXONOMY: </br><em>' + unique_taxonomy_comb_onLayer[index].join(",") + '</em><br/>';
        content += '<div class= "PanelHalf">TOTAL READS:<br/><span>' + format(d.data) + '</span></div><div class= "PanelHalf">PERCENTAGE:<br/><span>' + ((d.endAngle - d.startAngle) / 2 / Math.PI * 100).toFixed(1) + '%</span></div></div>';
        content += '<br/><br/>';
        infoPanel.html(content);
        return infoPanel.style({
          "visibility": "visible",
          top: (d3.event.pageY - 20) + "px",
          left: (d3.event.pageX + 25) + "px"
        });
      }).on('mouseout', function(d, i) {
        d3.selectAll('g.arc_' + donutID).style('opacity', 1);
        return infoPanel.style({
          "visibility": "hidden"
        });
      }).on('click', function(d, i) {
        if ($('#toggleDy_' + donutID).hasClass('clicked')) {
          return that.drawBasicRect(false, donutContainedSamp, donutID, i, 'dynamic');
        } else {
          return that.drawBasicRect(false, donutContainedSamp, donutID, i, 'standardized');
        }
      });
      svg.append('text').attr('dy', '.35em').attr('y', '-7').style('text-anchor', 'middle').attr("font-size", "12px").text(donutName);
      svg.append('text').attr('dy', '.35em').style('text-anchor', 'middle').attr("font-size", "14px").attr('y', '7').text(format(d3.sum(donutData)));
      d3.select('#donut_' + donutID).append("g").attr('height', 235).attr('id', 'selectedColumn_' + donutID).attr("transform", "translate(150,-100)");
      d3.select('#donut_' + donutID).append("text").attr("id", "containedTaxonomy_" + donutID).style("font-size", "11px").style("text-anchor", "start").style("font-style", "italic").attr("x", -100).attr("y", 130);
      return this.drawBasicRect(true, donutContainedSamp, donutID, null, 'dynamic');
    };

    taxonomyViz.prototype.drawBasicRect = function(totalFlag, containedSamp, donutID, selectedTaxnomy, toggleStandard) {
      var content, eachBarWidth, i, j, l, n, o, rectArr, rectContainedSamp, ref, ref1, ref2, rule, thisTaxonomyName, yScale;
      rectArr = new Array(containedSamp.length);
      for (i = l = 0, ref = containedSamp.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        rectArr[i] = 0;
        if (totalFlag) {
          for (j = n = 0, ref1 = new_data_matrix_onLayer.length - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; j = 0 <= ref1 ? ++n : --n) {
            rectArr[i] += new_data_matrix_onLayer[j][containedSamp[i]];
          }
        } else {
          rectArr[i] += new_data_matrix_onLayer[selectedTaxnomy][containedSamp[i]];
        }
      }
      if (totalFlag) {
        d3.select('#containedTaxonomy_' + donutID).html(unique_taxonomy_comb_onLayer.length + ' Taxonomy in Total');
      } else {
        thisTaxonomyName = unique_taxonomy_comb_onLayer[selectedTaxnomy].join(",");
        content = '';
        for (i = o = 0, ref2 = thisTaxonomyName.length % 35; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
          content += '<tspan x="-100" dy="1.2em">' + thisTaxonomyName.substring(i * 35, (i + 1) * 35) + '</tspan>';
        }
        d3.select('#containedTaxonomy_' + donutID).html(content);
      }
      if (d3.max(rectArr) > standardizedValue) {
        standardizedValue = d3.max(rectArr);
      }
      if (toggleStandard === 'dynamic') {
        yScale = d3.scale.pow().exponent(.5).domain([0, d3.max(rectArr)]).range([2, 160]);
      } else {
        yScale = d3.scale.pow().exponent(.5).domain([0, standardizedValue]).range([2, 160]);
      }
      eachBarWidth = 20;
      $('#selectedColumn_' + donutID).empty();
      rectContainedSamp = d3.select('#selectedColumn_' + donutID);
      rectContainedSamp.selectAll('rect').data(rectArr).enter().append('rect').attr('height', function(d) {
        return yScale(d);
      }).attr('width', eachBarWidth - 3).attr("x", function(d, i) {
        return eachBarWidth * i + 50;
      }).attr("y", function(d, i) {
        return 170 - yScale(d);
      }).style("fill", function(d, i) {
        if (totalFlag) {
          return '#919396';
        } else {
          return fillCol[selectedTaxnomy % 20];
        }
      });
      rectContainedSamp.selectAll('text').data(containedSamp).enter().append('text').text(function(d, i) {
        return String(selected_phinchID_array[d]);
      }).attr('x', 0).attr('y', 0).attr('width', eachBarWidth).attr('text-anchor', 'end').attr("font-size", "9px").attr('fill', '#444').attr('transform', function(d, i) {
        return "translate(" + (eachBarWidth * i + 65) + ", 200)rotate(-45)";
      });
      rule = rectContainedSamp.selectAll('g.rule').data(yScale.ticks(10)).enter().append('g').attr('class', 'rule').attr('transform', function(d) {
        return "translate(0," + (172 - yScale(d)) + ")";
      });
      rule.append('line').attr('x1', 45).attr('x2', 55 + containedSamp.length * 20).style("stroke", function(d) {
        if (d) {
          return "#eee";
        } else {
          return "#444";
        }
      }).style("stroke-opacity", function(d) {
        if (d) {
          return 0.7;
        } else {
          return null;
        }
      });
      return rule.append('text').attr('x', 40).attr("font-size", "9px").attr('text-anchor', 'end').attr('fill', '#444').text(function(d, i) {
        return format(d);
      });
    };

    taxonomyViz.prototype.drawTaxonomyByAttributes = function(cur_attribute) {
      var aa, ab, ac, ad, ae, af, arr_id, attributes_array, content, count, countEmpty, i, j, l, legendArr, n, o, p, q, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, selected_new_data_matrix_onLayer, t, temp, u, v, z;
      $('#taxonomy_container').html("");
      $('#attributes_dropdown').fadeIn(200);
      selected_new_data_matrix_onLayer = new Array(new_data_matrix_onLayer.length);
      attributes_array = [];
      countEmpty = [];
      for (i = l = 0, ref = selected_samples.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        if (attributes_array.indexOf(parseFloat(biom.columns[i].metadata[cur_attribute].split(" ")[0])) === -1 && biom.columns[i].metadata[cur_attribute] !== 'no_data') {
          attributes_array.push(parseFloat(biom.columns[i].metadata[cur_attribute].split(" ")[0]));
        }
      }
      attributes_array.sort(function(a, b) {
        return a - b;
      });
      count = new Array(attributes_array.length);
      for (i = n = 0, ref1 = attributes_array.length - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; i = 0 <= ref1 ? ++n : --n) {
        count[i] = [];
      }
      for (i = o = 0, ref2 = new_data_matrix_onLayer.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
        selected_new_data_matrix_onLayer[i] = new Array(attributes_array.length);
        for (j = p = 0, ref3 = attributes_array.length - 1; 0 <= ref3 ? p <= ref3 : p >= ref3; j = 0 <= ref3 ? ++p : --p) {
          selected_new_data_matrix_onLayer[i][j] = 0.0;
        }
        for (j = q = 0, ref4 = selected_samples.length - 1; 0 <= ref4 ? q <= ref4 : q >= ref4; j = 0 <= ref4 ? ++q : --q) {
          arr_id = attributes_array.indexOf(parseFloat(biom.columns[j].metadata[cur_attribute].split(" ")[0]));
          selected_new_data_matrix_onLayer[i][arr_id] += new_data_matrix_onLayer[i][j];
        }
      }
      for (i = t = 0, ref5 = selected_samples.length - 1; 0 <= ref5 ? t <= ref5 : t >= ref5; i = 0 <= ref5 ? ++t : --t) {
        if (!isNaN(parseFloat(biom.columns[i].metadata[cur_attribute].split(" ")[0]))) {
          count[attributes_array.indexOf(parseFloat(biom.columns[i].metadata[cur_attribute].split(" ")[0]))].push(i);
        } else {
          countEmpty.push(i);
        }
      }
      vizdata = new Array(selected_new_data_matrix_onLayer.length);
      sumEachCol = new Array(attributes_array.length);
      for (i = u = 0, ref6 = selected_new_data_matrix_onLayer.length - 1; 0 <= ref6 ? u <= ref6 : u >= ref6; i = 0 <= ref6 ? ++u : --u) {
        vizdata[i] = new Array(attributes_array.length);
        for (j = v = 0, ref7 = attributes_array.length - 1; 0 <= ref7 ? v <= ref7 : v >= ref7; j = 0 <= ref7 ? ++v : --v) {
          vizdata[i][j] = {
            x: j,
            y: selected_new_data_matrix_onLayer[i][j],
            name: unique_taxonomy_comb_onLayer[i].join(","),
            y0: 0
          };
        }
      }
      for (i = z = 0, ref8 = attributes_array.length - 1; 0 <= ref8 ? z <= ref8 : z >= ref8; i = 0 <= ref8 ? ++z : --z) {
        sumEachCol[i] = 0;
        for (j = aa = 0, ref9 = selected_new_data_matrix_onLayer.length - 1; 0 <= ref9 ? aa <= ref9 : aa >= ref9; j = 0 <= ref9 ? ++aa : --aa) {
          vizdata[j][i].y0 = sumEachCol[i];
          sumEachCol[i] += selected_new_data_matrix_onLayer[j][i];
        }
      }
      this.drawBasicColumns(attributes_array, cur_attribute, count);
      $('#count_container').html("");
      content = '';
      if (selected_attributes_units_array[selected_attributes_array.indexOf(cur_attribute)] === void 0 || selected_attributes_units_array[selected_attributes_array.indexOf(cur_attribute)] === null) {
        content += '<span>' + cur_attribute + '</span>';
      } else {
        content += '<span>' + cur_attribute + ', ' + selected_attributes_units_array[selected_attributes_array.indexOf(cur_attribute)] + '</span>';
      }
      if (attributes_array.length > 0) {
        for (i = ab = 0, ref10 = attributes_array.length - 1; 0 <= ref10 ? ab <= ref10 : ab >= ref10; i = 0 <= ref10 ? ++ab : --ab) {
          content += '<p><b>' + attributes_array[i] + '</b>:&nbsp;&nbsp;';
          if (count[i].length === 0) {
            content += 'no samples';
          } else if (count[i].length === 1) {
            content += count[i][0];
          } else if (count[i].length > 2) {
            for (j = ac = 0, ref11 = count[i].length - 2; 0 <= ref11 ? ac <= ref11 : ac >= ref11; j = 0 <= ref11 ? ++ac : --ac) {
              content += count[i][j] + ', ';
            }
            content += count[i][count[i].length - 1];
          }
          content += '</p>';
        }
      }
      if (countEmpty.length > 0) {
        content += '<p><i><b>* NaN value samples</b>:&nbsp;&nbsp;';
        for (i = ad = 0, ref12 = countEmpty.length - 1; 0 <= ref12 ? ad <= ref12 : ad >= ref12; i = 0 <= ref12 ? ++ad : --ad) {
          content += countEmpty[i] + ', ';
        }
        content += '</i></p>';
      }
      $('#count_container').html(content);
      legendArr = [];
      for (i = ae = 0, ref13 = selected_new_data_matrix_onLayer.length - 1; 0 <= ref13 ? ae <= ref13 : ae >= ref13; i = 0 <= ref13 ? ++ae : --ae) {
        temp = {
          'originalID': i,
          'value': 0,
          'name': unique_taxonomy_comb_onLayer[i].join(",")
        };
        for (j = af = 0, ref14 = selected_new_data_matrix_onLayer[0].length - 1; 0 <= ref14 ? af <= ref14 : af >= ref14; j = 0 <= ref14 ? ++af : --af) {
          temp.value += selected_new_data_matrix_onLayer[i][j];
        }
        legendArr.push(temp);
      }
      return this.createLegend(legendArr);
    };

    taxonomyViz.prototype.drawBasicColumns = function(attributes_array, cur_attribute, count) {
      var attr_n_unit, height, label, margin, max_single, rect, rule, svg, taxonomy, tooltip, width, x, y;
      height = 800;
      width = 200 + sumEachCol.length * 18;
      max_single = d3.max(sumEachCol);
      margin = {
        top: 20,
        right: 20,
        bottom: 20,
        left: 100
      };
      x = d3.scale.ordinal().domain(vizdata[0].map(function(d) {
        return d.x;
      })).rangeRoundBands([0, width - margin.right - margin.left]);
      y = d3.scale.linear().domain([0, max_single]).range([0, height - margin.top - margin.bottom]);
      svg = d3.select("#taxonomy_container").append("svg").attr("width", width).attr("height", height + 100).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      tooltip = d3.select("#taxonomy_container").append("div").attr("class", "basicTooltip").style("visibility", "hidden");
      taxonomy = svg.selectAll('g.taxonomy').data(vizdata).enter().append('g').attr('class', 'taxonomy').style('fill', function(d, i) {
        return fillCol[i % 20];
      }).on('mouseover', function(d, i) {
        return d3.select(this).style({
          'fill': d3.rgb(fillCol[i % 20]).darker()
        });
      }).on('mouseout', function(d, i) {
        return d3.select(this).style({
          'fill': fillCol[i % 20]
        });
      });
      rect = taxonomy.selectAll('rect').data(Object).enter().append('rect').attr('width', 15).attr('x', function(d, i) {
        return 20 * i + 20;
      }).attr('y', function(d, i) {
        if (!percentView) {
          return height - y(d.y) - y(d.y0);
        } else {
          return height - (y(d.y) + y(d.y0)) / sumEachCol[i] * max_single;
        }
      }).attr('height', function(d, i) {
        if (!percentView) {
          return y(d.y);
        } else {
          return y(d.y) / sumEachCol[i] * max_single;
        }
      }).on('mouseover', function(d, i) {
        var content, j, l, n, ref, ref1;
        content = "";
        if (attributes_array.length > 0) {
          for (i = l = 0, ref = attributes_array.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
            content += '<b>' + attributes_array[i] + '</b>:&nbsp;&nbsp;';
            if (count[i].length === 1) {
              content += selected_phinchID_array[count[i][0]] + ' (<i>' + count[i][0] + '</i>)';
            } else if (count[i].length > 2) {
              for (j = n = 0, ref1 = count[i].length - 2; 0 <= ref1 ? n <= ref1 : n >= ref1; j = 0 <= ref1 ? ++n : --n) {
                content += selected_phinchID_array[count[i][j]] + ' (<i>' + count[i][j] + '</i>), ';
              }
              content += selected_phinchID_array[count[i][count[i].length - 1]] + ' (<i>' + count[i][count[i].length - 1] + '</i>)';
            }
            content += '</br>';
          }
        }
        tooltip.html("<img class='PanelImg' src='css/images/tooltip.png'><div class='PanelHead'>TAXONOMY:</br><em>" + d.name + "</em><br/>TOTAL READS:</br><span> " + format(d.y) + "</span></div><div class='PanelBody'>" + content + "</div>");
        return tooltip.style({
          "visibility": "visible",
          top: (d3.event.pageY - 20) + "px",
          left: (d3.event.pageX + 30) + "px"
        });
      }).on('mouseout', function(d, i) {
        return tooltip.style("visibility", "hidden");
      });
      label = svg.selectAll('text').data(attributes_array).enter().append('text').text(function(d, i) {
        return d;
      }).attr('x', 0).attr('y', 0).attr('text-anchor', 'middle').attr("font-size", "10px").attr('fill', '#444').attr('transform', function(d, i) {
        return "translate(" + (20 * i + 27.5) + ", " + (height + 15) + ")rotate(-45)";
      });
      rule = svg.selectAll('g.rule').data(y.ticks(10)).enter().append('g').attr('class', 'rule').attr('transform', function(d) {
        return "translate(0," + (height - y(d)) + ")";
      });
      rule.append('line').attr('x2', function(d, i) {
        return width;
      }).style("stroke", function(d) {
        if (d) {
          return "#eee";
        } else {
          return "#444";
        }
      }).style("stroke-opacity", function(d) {
        if (d) {
          return 0.7;
        } else {
          return null;
        }
      });
      rule.append('text').attr('x', -25).attr("font-size", "9px").attr('text-anchor', 'end').attr('fill', '#444').text(function(d, i) {
        if (!percentView) {
          return format(d);
        } else {
          return Math.round(i / (y.ticks(10).length) * 100) + '%';
        }
      });
      attr_n_unit = cur_attribute;
      if (selected_attributes_units_array[selected_attributes_array.indexOf(cur_attribute)] !== void 0 && selected_attributes_units_array[selected_attributes_array.indexOf(cur_attribute)] !== null) {
        attr_n_unit += ', ' + selected_attributes_units_array[selected_attributes_array.indexOf(cur_attribute)];
      }
      return svg.append('text').attr('x', width / 2 - 80).attr('y', height + 40).attr('font-size', '11px').text(attr_n_unit);
    };

    taxonomyViz.prototype.drawOTUBubble = function() {
      var data, filteredData, flag, fontScale, height, i, j, l, n, nodes, o, p, pack, q, r, ref, ref1, ref2, ref3, ref4, rowID, svg, that, threshold, width, x, y;
      data = {
        name: 'BIOM',
        children: new Array(unique_taxonomy_comb_onLayer.length)
      };
      for (i = l = 0, ref = unique_taxonomy_comb_onLayer.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        data.children[i] = {};
        data.children[i].name = unique_taxonomy_comb_onLayer[i][0] + ',' + unique_taxonomy_comb_onLayer[i][1] + ',' + unique_taxonomy_comb_onLayer[i][2] + ',' + unique_taxonomy_comb_onLayer[i][3] + ',' + unique_taxonomy_comb_onLayer[i][4] + ',' + unique_taxonomy_comb_onLayer[i][5] + ',' + unique_taxonomy_comb_onLayer[i][6];
        data.children[i].children = new Array(unique_taxonomy_comb_count[i]);
        data.children[i].counter = 0;
        for (j = n = 0, ref1 = unique_taxonomy_comb_count[i] - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; j = 0 <= ref1 ? ++n : --n) {
          data.children[i].children[j] = {};
          data.children[i].children[j].id = void 0;
          data.children[i].children[j].size = 0;
        }
      }
      for (i = o = 0, ref2 = biom.data.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
        flag = true;
        rowID = map_array[biom.data[i][0]];
        for (j = p = 0, ref3 = unique_taxonomy_comb_count[rowID] - 1; 0 <= ref3 ? p <= ref3 : p >= ref3; j = 0 <= ref3 ? ++p : --p) {
          if (data.children[rowID].children[j].id === biom.data[i][0]) {
            flag = false;
            data.children[rowID].children[j].size += biom.data[i][2];
          }
        }
        if (flag) {
          data.children[rowID].children[data.children[rowID].counter].id = biom.data[i][0];
          data.children[rowID].children[data.children[rowID].counter].size += biom.data[i][2];
          data.children[rowID].counter += 1;
        }
      }
      width = 1200;
      height = 1100;
      r = 1000;
      x = d3.scale.linear().range([5, r]);
      y = d3.scale.linear().range([5, r]);
      fontScale = d3.scale.linear().domain([0, 0.5]).range([10, 20]);
      pack = d3.layout.pack().size([r, r]).value(function(d) {
        return Math.sqrt(d.size);
      });
      svg = d3.select("#taxonomy_container").append("svg:svg").attr("width", width).attr("height", height).append('svg:g').attr("transform", "translate(" + (width - r) / 2 + ", 10)");
      threshold = 2000;
      filteredData = {
        name: 'BIOM',
        children: []
      };
      for (i = q = 0, ref4 = data.children.length - 1; 0 <= ref4 ? q <= ref4 : q >= ref4; i = 0 <= ref4 ? ++q : --q) {
        if (data.children[i].counter > threshold) {
          filteredData.children.push(data.children[i]);
        }
      }
      that = this;
      nodes = pack.nodes(filteredData);
      svg.selectAll("circle").data(nodes).enter().append("svg:circle").attr("class", function(d) {
        if (d.children !== null) {
          return 'parent';
        } else {
          return 'child';
        }
      }).attr("cx", function(d) {
        if (isNaN(d.x)) {
          return 0;
        } else {
          return d.x;
        }
      }).attr("cy", function(d) {
        if (isNaN(d.y)) {
          return 0;
        } else {
          return d.y;
        }
      }).attr("r", function(d) {
        return d.r;
      }).style("fill", '#919396');
      return svg.selectAll("text").data(nodes).enter().append("svg:text").attr("class", function(d) {
        if (d.children !== null) {
          return 'parent';
        } else {
          return 'child';
        }
      }).attr("x", function(d) {
        return d.x;
      }).attr("y", function(d) {
        d.y += d.r * (Math.random() - 0.5);
        return d.y;
      }).attr("font-size", function(d) {
        return fontScale(d.r / r) + "px";
      }).attr("text-anchor", "middle").style("fill", '#919396').style("opacity", function(d) {
        if (d.r > 50) {
          return 0.8;
        } else {
          return 0;
        }
      }).text(function(d) {
        return d.name;
      });
    };

    taxonomyViz.prototype.createLegend = function(legendArr) {
      var content, i, l, legendLen, ref;
      legendArr.sort(function(a, b) {
        return b.value - a.value;
      });
      $('#legend_container').html('');
      content = '<ul>';
      if (legendArr.length < 10) {
        legendLen = legendArr.length - 1;
      } else {
        legendLen = 9;
      }
      for (i = l = 0, ref = legendLen; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        content += '<li><span style = "display:block; background-color:' + fillCol[legendArr[i].originalID % 20] + '; height: 12px; width: 12px; float: left; margin: 2px 0px;" ></span>&nbsp;&nbsp;&nbsp;' + legendArr[i].name + '&nbsp;&nbsp;<em>' + format(legendArr[i].value) + '</em></li>';
      }
      content += '</ul>';
      $('#legend_container').append(content);
      if ($('#legend_header').html() === 'TOP SEQUENCES') {
        return $('#legend_header').css('width', $('#legend_container').width() - 1);
      }
    };

    taxonomyViz.prototype.fadeInOutCtrl = function() {
      var fadeInSpeed;
      fadeInSpeed = 250;
      $('#taxonomy_container').html("");
      $('#loadingIcon').css('opacity', '1');
      return $('#loadingIcon').animate({
        opacity: 0
      }, {
        duration: fadeInSpeed,
        specialEasing: {
          width: "easeInOutQuad"
        },
        complete: function() {
          $('#taxonomy_container').animate({
            opacity: 1
          }, {
            duration: fadeInSpeed
          });
          $('#layerSwitch').fadeIn(fadeInSpeed);
          switch (VizID) {
            case 1:
              return $('#outline, #tags, #PercentValue, #IdNameSort, #legend_header').fadeIn(fadeInSpeed);
            case 2:
              $('#ListBubble, #tags, #bubbleSliderContainer').fadeIn(fadeInSpeed);
              return $('.ui-slider-horizontal .ui-slider-handle').css({
                "margin-top": "-2px",
                "border": "none",
                "background": "#241F20"
              });
            case 3:
              $('#tags').fadeIn(fadeInSpeed);
              return $('#MsgBox').html("* " + unique_taxonomy_comb_count.length + " unique paths, cannot go deeper to the 6th or 7th layer.");
            case 5:
              return $('#PercentValue,#legend_header,#count_header').fadeIn(fadeInSpeed);
          }
        }
      });
    };

    taxonomyViz.prototype.exportCallback = function(data, textStatus, xhr) {
      var convertResult;
      convertResult = JSON.parse(data);
      if (convertResult['code'] === 0 && convertResult['err'] === '') {
        $('#downloadPreview img').attr('src', 'data:image/png;base64,' + convertResult['out']);
        $('#downloadPreview a').attr('href', 'data:image/png;base64,' + convertResult['out']);
        $('#exportHeader').html('Image has been sent to Galaxy (you may need to refresh your history). Below is a preview image.');
      } else {
        $('#exportHeader').html('unable to download image!');
      }
      return $('#exportLoading').fadeOut(500);
    };

    taxonomyViz.prototype.downloadChart = function() {
      var exportEndpoint, postData, svg, svgStringData;
      $('#exportShareDiv, #exportLoading').fadeIn(500);
      $('#downloadPreview img').attr('src', '');
      $('#downloadPreview a').attr('href', '');
      $('#exportHeader').html('Generating Image');
      $('#exportShareDiv .icon-remove').click(function(e) {
        return $('#exportShareDiv').fadeOut(500);
      });
      svg = $('svg');
      svgStringData = svg.wrap('<p>').parent().html();
      postData = {
        svg: svgStringData
      };
      exportEndpoint = backendServer + 'export.php';
      return $.post(exportEndpoint, postData, this.exportCallback).fail(function() {
        $('#exportHeader').html('Phinch Interactive Environment has been stopped due to inactivity, please restart.');
	$('#exportLoading').fadeOut(500); 
      });
    };

    taxonomyViz.prototype.doZip = function() {
      var obj_log, w;
      obj_log = {
        'selected_sample': selected_samples,
        'selected_sample_phinchID': selected_phinchID_array,
        'selected_attributes_array': selected_attributes_array,
        'selected_attributes_units_array': selected_attributes_units_array
      };
      w = new Worker('scripts/downloadWorker.js');
      w.addEventListener('message', (function(_this) {
        return function(e) {
          var d, dateStamp;
          d = new Date();
          dateStamp = d.getUTCFullYear() + "-" + (d.getUTCMonth() + 1) + "-" + d.getUTCDate() + "T" + d.getUTCHours() + ":" + d.getUTCMinutes() + ":" + d.getUTCSeconds() + "UTC";
          saveAs(e.data, "phinch-" + dateStamp + ".zip");
          $('#downloadFile i').removeClass('icon-spinner icon-spin');
          return $('#downloadFile i').addClass('icon-download');
        };
      })(this));
      return w.postMessage({
        "o1": JSON.stringify(biom),
        "o2": JSON.stringify(obj_log),
        "filename": filename
      });
    };

    taxonomyViz.prototype.shareViz = function() {
      var biomData, w;
      biomData = JSON.stringify(biom);
      $('#sharingInfo').show();
      if (shareFlag) {
        $('#sharingInfo .shareForm input, #sharingInfo .shareForm label, #sharingInfo .shareForm textarea').show();
        $('#sharingInfo #shareToEmail').val("");
        $('#sharingInfo #shareToName').val("");
        $('#sharingInfo .results').hide();
      } else {
        $('#sharingInfo .loadingText').text('Preparing data ... ');
      }
      w = new Worker('scripts/hashWorker.js');
      w.addEventListener('message', (function(_this) {
        return function(e) {
          var hashValue;
          console.log('worker message');
          hashValue = e.data;
          return _this.shareHashExists(hashValue);
        };
      })(this));
      return w.postMessage(biomData);
    };

    taxonomyViz.prototype.shareHashExists = function(hash) {
      var hashExistsEndpoint;
      this.shareHash = hash;
      hashExistsEndpoint = backendServer + "hashExists.php";
      return $.get(hashExistsEndpoint, {
        hash: hash
      }, this.shareHashExistsCallback);
    };

    taxonomyViz.prototype.shareHashExistsCallback = function(data, textStatus, xhr) {
      var hideShare;
      this.shareHashExists = data;
      $('#sharingInfo .loading').hide();
      $('#sharingInfo .shareForm').show();
      hideShare = function(e) {
        return $('#sharingInfo').fadeOut(200);
      };
      $('#sharingInfo .icon-remove').off('click', hideShare).on('click', hideShare);
      return $('#sharingInfo .shareButton').off('click', this.submitShare).on('click', this.submitShare);
    };

    taxonomyViz.prototype.submitShare = function() {
      var layerName, results, vizName;
      console.log('submit share');
      console.log(this.shareHash);
      console.log(LayerID + " " + VizID);
      layerName = layerNameArr[LayerID - 1];
      vizName = vizNameArr[VizID - 1];
      if (this.validateEmail($('#sharingInfo #shareFromEmail').val()) && this.validateEmail($('#sharingInfo #shareToEmail').val())) {
        shareFlag = true;
        $('#sharingInfo .shareForm input, #sharingInfo .shareForm label, #sharingInfo .shareForm textarea').hide();
        $('#sharingInfo .results').remove();
        $('#sharingInfo .results').show();
        results = d3.select('#sharingInfo').append('div').attr('class', 'results');
        results.append('div').html('Your visualization has been shared. <br/> Wait until the link is generated below: ');
        this.shareData = {
          from_email: $('#sharingInfo #shareFromEmail').val(),
          to_email: $('#sharingInfo #shareToEmail').val(),
          from_name: $('#sharingInfo #shareFromName').val(),
          to_name: $('#sharingInfo #shareToName').val(),
          notes: $('#sharingInfo #shareNotes').val(),
          biom_file_hash: this.shareHash,
          layer_name: layerName,
          filter_options_json: JSON.stringify(filterOptionJSON),
          viz_name: vizName
        };
        if (this.shareHashExists === 'true') {
          return this.shareRequest();
        } else {
          return this.generateBiomZip();
        }
      } else {
        return alert("Invalid email address ... ");
      }
    };

    taxonomyViz.prototype.generateBiomZip = function() {
      var biomData, w;
      biomData = JSON.stringify(biom);
      console.log(biomData.length);
      w = new Worker('scripts/zipWorker.js');
      w.addEventListener('message', (function(_this) {
        return function(e) {
          _this.shareData.biomFile = e.data;
          return _this.shareRequest();
        };
      })(this));
      return w.postMessage(biomData);
    };

    taxonomyViz.prototype.shareRequest = function() {
      var shareEndpoint;
      shareEndpoint = backendServer + "shareViz.php";
      return $.post(shareEndpoint, this.shareData, this.shareCallback, 'json');
    };

    taxonomyViz.prototype.shareCallback = function(data, textStatus, xhr) {
      var src;
      console.log(data);
      if (data.status === 'ok') {
        src = document.location.origin + document.location.pathname + "?shareID=" + data.urlHash;
        return d3.select('#sharingInfo .results').append('a').attr('href', src).attr('target', '_blank').text(src);
      }
    };

    taxonomyViz.prototype.validateEmail = function(email) {
      var re;
      re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return re.test(email);
    };

    return taxonomyViz;

  })();

  window.taxonomyViz = taxonomyViz;

}).call(this);
