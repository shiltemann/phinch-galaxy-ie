// Generated by CoffeeScript 1.10.0
(function() {
  var filter,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  filter = (function() {
    var attr_length, attributes_array, attributes_array_units, biom, columns_non_empty_sample_count, columns_sample_count_list, columns_sample_name_array, date_array, filename, format, groupable_array, groupable_array_content, no_data_attributes_array, phinch, phinchID_array, unknown_array;

    biom = null;

    phinch = null;

    filename = null;

    attr_length = null;

    format = d3.format(',d');

    date_array = [];

    no_data_attributes_array = [];

    unknown_array = [];

    attributes_array = [];

    attributes_array_units = [];

    groupable_array = [];

    groupable_array_content = [];

    columns_sample_name_array = [];

    columns_sample_count_list = [];

    columns_non_empty_sample_count = [];

    phinchID_array = [];

    function filter() {
      this.drawBasicBars = bind(this.drawBasicBars, this);
      db.open({
        server: "BiomData",
        version: 1,
        schema: {
          "biom": {
            key: {
              keyPath: 'id',
              autoIncrement: true
            }
          }
        }
      }).done((function(_this) {
        return function(s) {
          _this.server = s;
          return s.biom.query().all().execute().done(function(results) {
            var currentData, i, l, ref;
            currentData = results[results.length - 1];
            filename = currentData.name;
            biom = JSON.parse(currentData.data);
            phinch = JSON.parse(currentData.data);
            attr_length = biom.shape[1] - 1;
            _this.generateColumns();
            _this.generateColumnsSummary();
            _this.generateColumnsValues();
            _this.generateDate();
            $("#file_details").append("ANALYZING &nbsp;<span>" + filename.substring(0, 52) + "</span> &nbsp;&nbsp;&nbsp;" + (parseFloat(currentData.size.valueOf() / 1000000)).toFixed(1) + " MB <br/><br />OBSERVATION &nbsp;&nbsp;&nbsp;<span>" + format(biom.shape[0]) + "</span> &nbsp;&nbsp;&nbsp; SELECTED SAMPLES &nbsp;&nbsp;&nbsp;<span>" + format(biom.shape[1]) + "</span>");
            $('#goExport').click(function() {
              return _this.downloadPhinch(0);
            });
            $('#goGallery').click(function() {
              $('#right_live_panel').html('<i class="icon-spinner icon-spin icon-large icon-4x" style="float:right;"></i>');
              return setTimeout(function() {
                return _this.downloadPhinch(1);
              }, 200);
            });
            _this.generateLeftDates();
            _this.generateLeftNumeric();
            _this.generateLeftNonNumeric();
            _this.generateLeftGroupable();
            if (groupable_array_content.length > 0) {
              for (i = l = 0, ref = groupable_array_content.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
                if (typeof groupable_array_content[i] === 'number') {
                  groupable_array_content.splice(groupable_array_content.indexOf(groupable_array_content[i]), 1);
                }
              }
            }
            _this.generateThumbnails();
            return _this.livePreview();
          });
        };
      })(this));
    }

    filter.prototype.jumpToGallery = function() {
      var that;
      that = this;
      return db.open({
        server: "BiomSample",
        version: 1,
        schema: {
          "biomSample": {
            key: {
              keyPath: 'id',
              autoIncrement: true
            }
          }
        }
      }).done((function(_this) {
        return function(s) {
          var i, l, n, ref, ref1, sampleToStore, selected_attributes_units_array, selected_phinchID_array;
          sampleToStore = {};
          sampleToStore.name = filename;
          sampleToStore.type = 'sampleIDs';
          sampleToStore.selected_sample = _this.selected_sample;
          sampleToStore.groupable = groupable_array;
          sampleToStore.selected_groupable_array = _this.selected_groupable_array;
          sampleToStore.selected_attributes_array = _this.selected_attributes_array;
          selected_phinchID_array = [];
          for (i = l = 0, ref = _this.selected_sample.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
            selected_phinchID_array.push(phinchID_array[_this.selected_sample[i]]);
          }
          sampleToStore.selected_phinchID_array = selected_phinchID_array;
          selected_attributes_units_array = _this.selected_attributes_units_array;
          if (_this.selected_attributes_units_array.length > 0) {
            for (i = n = 0, ref1 = _this.selected_attributes_units_array.length - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; i = 0 <= ref1 ? ++n : --n) {
              if ($('#unit_' + (i + 1)).val() !== _this.selected_attributes_units_array[i] && $('#unit_' + (i + 1)).val() !== '') {
                selected_attributes_units_array[i] = $('#unit_' + (i + 1)).val();
              }
            }
          }
          sampleToStore.selected_attributes_units_array = _this.selected_attributes_units_array;
          return s.biomSample.add(sampleToStore).done(function(item) {
            return setTimeout("window.location.href = 'viz.html'");
          });
        };
      })(this));
    };

    filter.prototype.generateColumns = function() {
      var flag, i, idential_elements_in_array, idential_elements_in_array_flag, j, key, l, n, o, p, ref, ref1, ref2, ref3, ref4, results1, starting_flag, unitsFlag;
      results1 = [];
      for (key in biom.columns[0].metadata) {
        if (key.toLowerCase().indexOf("date") !== -1) {
          results1.push(date_array.push(key));
        } else if (key === 'phinchID') {
          results1.push(console.log('PhinchID does exsit!'));
        } else if ((key.toLowerCase().indexOf("barcode") !== -1) || (key.toLowerCase().indexOf("sequence") !== -1) || (key.toLowerCase().indexOf("reverse") !== -1) || (key.toLowerCase() === "internalcode") || (key.toLowerCase() === "description") || (key.toLowerCase().indexOf("adapter") !== -1)) {
          results1.push(no_data_attributes_array.push(key));
        } else if (!isNaN(biom.columns[0].metadata[key].split(" ")[0].replace(",", "")) || biom.columns[0].metadata[key] === "no_data") {
          idential_elements_in_array_flag = false;
          for (i = l = 0, ref = attr_length; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
            if (biom.columns[i].metadata[key] !== 'no_data') {
              idential_elements_in_array = biom.columns[i].metadata[key];
              break;
            }
          }
          for (i = n = 0, ref1 = attr_length; 0 <= ref1 ? n <= ref1 : n >= ref1; i = 0 <= ref1 ? ++n : --n) {
            if (biom.columns[i].metadata[key] !== idential_elements_in_array && biom.columns[i].metadata[key] !== 'no_data') {
              idential_elements_in_array_flag = true;
            }
          }
          unitsFlag = false;
          if (idential_elements_in_array_flag) {
            attributes_array.push(key);
            results1.push((function() {
              var o, ref2, results2;
              results2 = [];
              for (i = o = 0, ref2 = attr_length; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
                if (biom.columns[i].metadata[key] !== 'no_data' && unitsFlag === false) {
                  attributes_array_units.push(biom.columns[i].metadata[key].split(" ")[1]);
                  results2.push(unitsFlag = true);
                } else {
                  results2.push(void 0);
                }
              }
              return results2;
            })());
          } else {
            results1.push(no_data_attributes_array.push(key));
          }
        } else if (typeof key === 'string') {
          groupable_array.push(key);
          starting_flag = groupable_array_content.length;
          groupable_array_content.push(starting_flag);
          for (i = o = 0, ref2 = attr_length; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
            flag = true;
            if (groupable_array_content.length > 0) {
              for (j = p = ref3 = starting_flag + 1, ref4 = groupable_array_content.length - 1; ref3 <= ref4 ? p <= ref4 : p >= ref4; j = ref3 <= ref4 ? ++p : --p) {
                if (biom.columns[i].metadata[key] === groupable_array_content[j]) {
                  flag = false;
                  break;
                }
              }
              if (flag) {
                groupable_array_content.push(biom.columns[i].metadata[key]);
              }
            }
          }
          if (groupable_array_content.length - starting_flag === 2) {
            no_data_attributes_array.push(key);
            groupable_array.splice(groupable_array.length - 1, 1);
            results1.push(groupable_array_content.splice(groupable_array_content.length - 2, 2));
          } else {
            results1.push(void 0);
          }
        } else {
          results1.push(unknown_array.push(key));
        }
      }
      return results1;
    };

    filter.prototype.generateColumnsSummary = function() {
      var columns_sample_total_count, i, l, n, o, p, ref, ref1, ref2, ref3, results1;
      columns_sample_total_count = 0;
      for (i = l = 0, ref = attr_length; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        columns_sample_count_list[i] = 0;
        columns_sample_name_array.push(biom.columns[i].id);
      }
      for (i = n = 0, ref1 = attr_length; 0 <= ref1 ? n <= ref1 : n >= ref1; i = 0 <= ref1 ? ++n : --n) {
        if (biom.columns[i].metadata['phinchID'] != null) {
          phinchID_array.push(biom.columns[i].metadata['phinchID']);
        } else {
          phinchID_array.push(i);
        }
      }
      for (i = o = 0, ref2 = biom.data.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
        columns_sample_total_count += biom.data[i][2];
        columns_sample_count_list[biom.data[i][1]] += biom.data[i][2];
      }
      results1 = [];
      for (i = p = 0, ref3 = attr_length; 0 <= ref3 ? p <= ref3 : p >= ref3; i = 0 <= ref3 ? ++p : --p) {
        if (columns_sample_count_list[i] > 0) {
          results1.push(columns_non_empty_sample_count.push(i));
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };

    filter.prototype.generateColumnsValues = function() {
      var i, j, key, l, n, ref, ref1, results1;
      this.columns_metadata_array = [];
      this.columns_metadata_array = new Array(attributes_array.length);
      if (attributes_array.length > 0) {
        for (i = l = 0, ref = attributes_array.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
          this.columns_metadata_array[i] = new Array(attr_length + 1);
        }
        results1 = [];
        for (i = n = 0, ref1 = attr_length; 0 <= ref1 ? n <= ref1 : n >= ref1; i = 0 <= ref1 ? ++n : --n) {
          results1.push((function() {
            var results2;
            results2 = [];
            for (key in biom.columns[i].metadata) {
              results2.push((function() {
                var o, ref2, results3;
                results3 = [];
                for (j = o = 0, ref2 = attributes_array.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; j = 0 <= ref2 ? ++o : --o) {
                  if (key === attributes_array[j]) {
                    this.columns_metadata_array[j][i] = parseFloat(biom.columns[i].metadata[key].split(" ")[0].replace(",", ""));
                    if (isNaN(this.columns_metadata_array[j][i])) {
                      results3.push(this.columns_metadata_array[j][i] = -99999);
                    } else {
                      results3.push(void 0);
                    }
                  } else {
                    results3.push(void 0);
                  }
                }
                return results3;
              }).call(this));
            }
            return results2;
          }).call(this));
        }
        return results1;
      }
    };

    filter.prototype.generateDate = function() {
      var date_meta_key, i, l, m, n, number_date_array, ori_timestamp, ref, ref1, results1;
      this.formatted_date_array = new Array(date_array.length);
      this.sorted_number_date_array_d = new Array(date_array.length);
      this.sorted_number_date_array_freq = new Array(date_array.length);
      number_date_array = new Array(date_array.length);
      if (date_array.length > 0) {
        results1 = [];
        for (m = l = 0, ref = date_array.length - 1; 0 <= ref ? l <= ref : l >= ref; m = 0 <= ref ? ++l : --l) {
          this.formatted_date_array[m] = [];
          this.sorted_number_date_array_d[m] = [];
          this.sorted_number_date_array_freq[m] = [];
          date_meta_key = date_array[m];
          number_date_array[m] = [];
          for (i = n = 0, ref1 = attr_length; 0 <= ref1 ? n <= ref1 : n >= ref1; i = 0 <= ref1 ? ++n : --n) {
            ori_timestamp = biom.columns[i].metadata[date_meta_key];
            if (ori_timestamp.length < 11 && ori_timestamp.indexOf(":") === -1) {
              this.formatted_date_array[m].push(moment(ori_timestamp).format("YYYY-MM-DD"));
              number_date_array[m].push(moment(ori_timestamp).format("YYYYMMDD"));
            } else {
              this.formatted_date_array[m].push(moment(ori_timestamp, "YYYY-MM-DDTHH:mm:ss Z").utc().format());
              number_date_array[m].push(moment(ori_timestamp, "YYYY-MM-DDTHH:mm:ss Z").utc().format("YYYYMMDDHHmmss"));
            }
          }
          this.sorted_number_date_array_d[m] = this.sortByFrequency(number_date_array[m])[0];
          results1.push(this.sorted_number_date_array_freq[m] = this.sortByFrequency(number_date_array[m])[1]);
        }
        return results1;
      }
    };

    filter.prototype.generateLeftDates = function() {
      var content, l, m, max_timestamp, min_timestamp, ref, results1;
      content = "";
      this.range_dates_array = [];
      if (date_array.length === 0) {
        return $('#att_head_dates').hide();
      } else {
        if (date_array.length > 0) {
          results1 = [];
          for (m = l = 0, ref = date_array.length - 1; 0 <= ref ? l <= ref : l >= ref; m = 0 <= ref ? ++l : --l) {
            if (this.check_unique(this.formatted_date_array[m])) {
              $('#dates').append("<div class = 'biom_valid_attr'><p>" + date_array[m] + ": " + this.formatted_date_array[m][0] + "</p></div>");
              this.range_dates_array[m] = new Array(2);
              this.range_dates_array[m][0] = moment(this.formatted_date_array[m][0]).utc().format("X");
              results1.push(this.range_dates_array[m][1] = moment(this.formatted_date_array[m][0]).utc().format("X"));
            } else {
              content += "<div class = 'biom_valid_attr_dates'>";
              content += date_array[m];
              content += "<div class = 'icon-expand-collapse-c' id= 'expend_collapse_dates_icon_" + (m + 1) + "'><i class='icon-expand-alt'></i></div>";
              if (this.sorted_number_date_array_d[m][0].length < 9) {
                content += "<p class='range_new_dates' id='range_dates_" + (m + 1) + "_new'>" + moment(this.sorted_number_date_array_d[m][0], "YYYYMMDD").format("MM/DD/YY") + " - " + moment(this.sorted_number_date_array_d[m][this.sorted_number_date_array_d[m].length - 1], "YYYYMMDD").format("MM/DD/YY") + "</p>";
              } else {
                content += "<p class='range_new_dates' id='range_dates_" + (m + 1) + "_new'>" + moment(this.sorted_number_date_array_d[m][0], "YYYYMMDDHHmmss").format("MM/DD/YY") + " - " + moment(this.sorted_number_date_array_d[m][this.sorted_number_date_array_d[m].length - 1], "YYYYMMDDHHmmss").format("MM/DD/YY") + "</p>";
              }
              content += "<div style='display: none;' id = 'expend_collapse_dates_" + (m + 1) + "'>" + "<div class= 'biom_valid_att_thumbnail_dates' id='thumb_dates_" + (m + 1) + "'></div>";
              content += "<div class='biom_valid_att_slider' id='slider_dates_" + (m + 1) + "'></div>";
              if (this.sorted_number_date_array_d[m][0].length < 9) {
                content += "<div class='range range_left_dates' id='range_dates_" + (m + 1) + "_left'>" + moment(this.sorted_number_date_array_d[m][0], "YYYYMMDD").format("YYYY-MM-DD") + "</div>";
                content += "<div class='range range_right_dates' id='range_dates_" + (m + 1) + "_right'>" + moment(this.sorted_number_date_array_d[m][this.sorted_number_date_array_d[m].length - 1], "YYYYMMDD").format("YYYY-MM-DD") + "</div>";
                min_timestamp = moment(this.sorted_number_date_array_d[m][0], "YYYYMMDD").utc().format("X");
                max_timestamp = moment(this.sorted_number_date_array_d[m][this.sorted_number_date_array_d[m].length - 1], "YYYYMMDD").utc().format("X");
              } else {
                content += "<div class='range range_left_dates' id='range_dates_" + (m + 1) + "_left'>" + moment(this.sorted_number_date_array_d[m][0], "YYYYMMDDHHmmss").format("YYYY-MM-DD<br/>HH:mm:ss") + "</div>";
                content += "<div class='range range_right_dates' id='range_dates_" + (m + 1) + "_right'>" + moment(this.sorted_number_date_array_d[m][this.sorted_number_date_array_d[m].length - 1], "YYYYMMDDHHmmss").format("YYYY-MM-DD<br/>HH:mm:ss") + "</div>";
                min_timestamp = moment(this.sorted_number_date_array_d[m][0], "YYYYMMDDHHmmss Z").utc().format("X");
                max_timestamp = moment(this.sorted_number_date_array_d[m][this.sorted_number_date_array_d[m].length - 1], "YYYYMMDDHHmmss Z").utc().format("X");
              }
              content += "</div></div>";
              $('#dates').append(content);
              $('#expend_collapse_dates_icon_' + (m + 1)).click((function(_this) {
                return function(event) {
                  var id;
                  id = event.currentTarget.id.replace('expend_collapse_dates_icon_', '');
                  if ($('#expend_collapse_dates_' + id).attr('style') === 'display: none;') {
                    $('#expend_collapse_dates_' + id).show();
                    return $('#expend_collapse_dates_icon_' + id).html('<i class="icon-collapse-alt"></i>');
                  } else {
                    $('#expend_collapse_dates_' + id).hide();
                    return $('#expend_collapse_dates_icon_' + id).html('<i class="icon-expand-alt"></i>');
                  }
                };
              })(this));
              this.drawBasicBars('#thumb_dates_' + (m + 1), null, this.sorted_number_date_array_freq[m], null, [250, 50]);
              $('#slider_dates_' + (m + 1)).width($('#thumb_dates_' + (m + 1) + ' svg').attr('width') - 2);
              this.range_dates_array[m] = new Array(2);
              this.range_dates_array[m][0] = min_timestamp;
              this.range_dates_array[m][1] = max_timestamp;
              results1.push($("#slider_dates_" + (m + 1)).slider({
                range: true,
                min: 0,
                max: this.sorted_number_date_array_freq[m].length - 1,
                step: 1,
                values: [0, this.sorted_number_date_array_freq[m].length - 1],
                slide: (function(_this) {
                  return function(event, ui) {
                    var id;
                    id = event.target.id.replace("slider_dates_", "");
                    $("#range_dates_" + id + "_new").text("[" + moment(_this.sorted_number_date_array_d[id - 1][ui.values[0]], "YYYYMMDD").format("MM/DD/YY") + " — " + moment(_this.sorted_number_date_array_d[id - 1][ui.values[1]], "YYYYMMDD").format("MM/DD/YY") + "]");
                    if (_this.sorted_number_date_array_d[id - 1][ui.values[0]].length < 9) {
                      _this.range_dates_array[id - 1][0] = moment(_this.sorted_number_date_array_d[id - 1][ui.values[0]], "YYYYMMDD").utc().format("X");
                      _this.range_dates_array[id - 1][1] = moment(_this.sorted_number_date_array_d[id - 1][ui.values[1]], "YYYYMMDD").utc().format("X");
                    } else {
                      _this.range_dates_array[id - 1][0] = moment(_this.sorted_number_date_array_d[id - 1][ui.values[0]], "YYYYMMDDHHmmss").utc().format("X");
                      _this.range_dates_array[id - 1][1] = moment(_this.sorted_number_date_array_d[id - 1][ui.values[1]], "YYYYMMDDHHmmss").utc().format("X");
                    }
                    return _this.livePreview();
                  };
                })(this)
              }));
            }
          }
          return results1;
        }
      }
    };

    filter.prototype.generateLeftNumeric = function() {
      var content, i, l, ref, results1;
      if (attributes_array.length === 0) {
        return $('#att_head_numeric').hide();
      } else {
        if (attributes_array.length > 0) {
          results1 = [];
          for (i = l = 0, ref = attributes_array.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
            content = "";
            content += "<input type='checkbox' name='numeric_check_group' id='numeric_check_" + (i + 1) + "' checked='checked' /><label for='numeric_check_" + (i + 1) + "'></label>";
            content += "<span class = 'biom_valid_attr' id='att_" + (i + 1) + "'>" + attributes_array[i] + "</span>";
            if (typeof attributes_array_units[i] !== 'undefined' && attributes_array_units[i] !== null) {
              content += "<input type='text' class='biom_valid_attr_units' id='unit_" + (i + 1) + "' placeholder='" + attributes_array_units[i] + "'>";
            } else {
              content += "<input type='text' class='biom_valid_attr_units' id='unit_" + (i + 1) + "' placeholder='unit'>";
            }
            content += "<div class = 'icon-expand-collapse-c' id= 'expend_collapse_icon_" + (i + 1) + "'><i class='icon-expand-alt'></i></div>";
            content += "<div class='biom_valid_att_thumbnail_sm' id='thumb_sm_" + (i + 1) + "'></div>";
            content += "<p class='range range_new' id='range_" + (i + 1) + "_new'></p>";
            content += "<div style='display: none;' id = 'expend_collapse_" + (i + 1) + "'>" + "<div class='biom_valid_att_thumbnail' id='thumb_" + (i + 1) + "'></div>";
            content += "<div class='biom_valid_att_slider' id='slider_" + (i + 1) + "'></div>";
            content += "<div class='blackSticks'></div>";
            content += "<p class='range range_left' id='range_" + (i + 1) + "_left'></p>";
            content += "<p class='range range_right' id='range_" + (i + 1) + "_right'></p>";
            content += "<p class='biom_valid_notes' id='att_note_" + (i + 1) + "'></p></div>";
            $('#numeric_att').append("<div>" + content + "</div>");
            $('#expend_collapse_icon_' + (i + 1)).click((function(_this) {
              return function(event) {
                var id;
                id = event.currentTarget.id.replace('expend_collapse_icon_', '');
                if ($('#expend_collapse_' + id).attr('style') === 'display: none;') {
                  $('#expend_collapse_' + id).show();
                  $('#att_' + id).css('font-weight', 'bold');
                  $('#unit_' + id).show();
                  $('#range_' + id + '_new').show();
                  $('#thumb_sm_' + id).hide();
                  return $('#expend_collapse_icon_' + id).html('<i class="icon-collapse-alt"></i>');
                } else {
                  $('#expend_collapse_' + id).hide();
                  $('#att_' + id).css('font-weight', 'normal');
                  $('#unit_' + id).hide();
                  $('#range_' + id + '_new').hide();
                  $('#thumb_sm_' + id).show();
                  return $('#expend_collapse_icon_' + id).html('<i class="icon-expand-alt"></i>');
                }
              };
            })(this));
            results1.push($('#numeric_check_' + (i + 1)).click((function(_this) {
              return function() {
                return _this.livePreview();
              };
            })(this)));
          }
          return results1;
        }
      }
    };

    filter.prototype.generateLeftNonNumeric = function() {
      var content, i, l, ref, results1;
      if (no_data_attributes_array.length === 0) {
        return $('#att_head_descriptive').hide();
      } else {
        if (no_data_attributes_array.length > 0) {
          results1 = [];
          for (i = l = 0, ref = no_data_attributes_array.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
            content = "";
            content += "<input type='checkbox' name='non_numeric_check_group' id='non_numeric_check_" + (i + 1) + "' /><label for='non_numeric_check_" + (i + 1) + "'></label><span class = 'biom_valid_attr'>" + no_data_attributes_array[i] + "</span>";
            $('#non_numeric_att').append("<div>" + content + "</div>");
            results1.push($('#non_numeric_check_' + (i + 1)).click((function(_this) {
              return function() {
                return _this.livePreview();
              };
            })(this)));
          }
          return results1;
        }
      }
    };

    filter.prototype.generateLeftGroupable = function() {
      var check_count, content, flag, i, j, k, l, n, o, pointer_left, pointer_right, ref, ref1, ref2, ref3, results1, toprocess;
      pointer_left = 1;
      pointer_right = groupable_array_content.length - 1;
      check_count = 1;
      if (groupable_array.length === 0) {
        return $('#att_head_groupable').hide();
      } else {
        if (groupable_array.length > 0) {
          results1 = [];
          for (i = l = 0, ref = groupable_array.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
            flag = true;
            toprocess = [];
            content = "";
            content += "<span class = 'biom_valid_attr'>" + groupable_array[i] + "</span><br/>";
            if (groupable_array_content.length > 0) {
              for (j = n = ref1 = pointer_left, ref2 = groupable_array_content.length - 1; ref1 <= ref2 ? n <= ref2 : n >= ref2; j = ref1 <= ref2 ? ++n : --n) {
                if (groupable_array_content[j] === j) {
                  pointer_right = j;
                  flag = false;
                  break;
                }
              }
              if (flag) {
                toprocess = groupable_array_content.slice(pointer_left, groupable_array_content.length);
              } else {
                toprocess = groupable_array_content.slice(pointer_left, pointer_right);
                pointer_left = pointer_right + 1;
                pointer_right = groupable_array_content.length - 1;
              }
              if (toprocess.length > 0) {
                for (k = o = 0, ref3 = toprocess.length - 1; 0 <= ref3 ? o <= ref3 : o >= ref3; k = 0 <= ref3 ? ++o : --o) {
                  content += "<input type='checkbox' name='groupable_check_group' id='groupable_check_" + check_count + "' checked='checked' /><label for='groupable_check_" + check_count + "'></label><span class = 'biom_valid_attr_grp'>" + toprocess[k] + "</span><br/>";
                  check_count++;
                }
                $('#groupable_att').append("<div class='overflowControl'>" + content + "</div>");
                results1.push((function() {
                  var p, ref4, results2;
                  results2 = [];
                  for (k = p = 0, ref4 = toprocess.length - 1; 0 <= ref4 ? p <= ref4 : p >= ref4; k = 0 <= ref4 ? ++p : --p) {
                    results2.push($('#groupable_check_' + (k + 1)).click((function(_this) {
                      return function() {
                        return _this.livePreview();
                      };
                    })(this)));
                  }
                  return results2;
                }).call(this));
              } else {
                results1.push(void 0);
              }
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }
      }
    };

    filter.prototype.generateThumbnails = function() {
      var each_numeric_linechart, each_numeric_linechart_max, each_numeric_linechart_min, i, l, nan_values, ref, results1, step;
      this.range_array = [];
      this.lines_array = new Array(this.columns_metadata_array.length);
      if (this.columns_metadata_array.length > 0) {
        step = new Array(this.columns_metadata_array.length);
        results1 = [];
        for (i = l = 0, ref = this.columns_metadata_array.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
          nan_values = 0;
          each_numeric_linechart = this.sortByFrequency(this.columns_metadata_array[i]);
          if (each_numeric_linechart[0][0] === -99999) {
            nan_values = each_numeric_linechart[1][0];
            each_numeric_linechart[0].shift();
            each_numeric_linechart[1].shift();
          }
          if (nan_values > 0) {
            $("#att_note_" + (i + 1)).text("* This column has " + nan_values + " empty values.");
          }
          this.lines_array[i] = new Array(2);
          this.lines_array[i][0] = each_numeric_linechart[0];
          this.lines_array[i][1] = each_numeric_linechart[1];
          each_numeric_linechart_min = Math.min.apply(Math, each_numeric_linechart[0]);
          each_numeric_linechart_max = Math.max.apply(Math, each_numeric_linechart[0]);
          this.drawBasicBars('#thumb_' + (i + 1), each_numeric_linechart[0], each_numeric_linechart[1], null, [250, 50]);
          this.drawBasicBars('#thumb_sm_' + (i + 1), each_numeric_linechart[0], each_numeric_linechart[1], null, [130, 15]);
          this.range_array[i] = new Array(2);
          this.range_array[i][0] = each_numeric_linechart_min;
          this.range_array[i][1] = each_numeric_linechart_max;
          step[i] = (each_numeric_linechart_max - each_numeric_linechart_min) / each_numeric_linechart[1].length;
          $('#slider_' + (i + 1)).width($('#thumb_' + (i + 1) + ' svg').attr('width') - 2);
          $("#slider_" + (i + 1)).slider({
            range: true,
            min: each_numeric_linechart_min,
            max: each_numeric_linechart_max,
            step: (each_numeric_linechart_max - each_numeric_linechart_min) / each_numeric_linechart[1].length,
            values: [each_numeric_linechart_min, each_numeric_linechart_max],
            slide: (function(_this) {
              return function(event, ui) {
                var id, leftValue, order, rightValue;
                id = event.target.id.replace("slider_", "");
                if (ui.value === ui.values[0]) {
                  order = Math.round((ui.values[0] - _this.lines_array[id - 1][0][0]) / step[id - 1]);
                  leftValue = _this.lines_array[id - 1][0][order];
                  _this.range_array[id - 1][0] = leftValue;
                  $("#range_" + id + "_left").text(leftValue).css('margin-left', Math.max(event.clientX - 40, 20));
                  $("#range_" + id + "_new").text("range: [" + leftValue + " — " + _this.range_array[id - 1][1] + "]");
                } else {
                  order = Math.round((ui.values[1] - _this.lines_array[id - 1][0][0]) / step[id - 1]) - 1;
                  rightValue = _this.lines_array[id - 1][0][order];
                  _this.range_array[id - 1][1] = rightValue;
                  $("#range_" + id + "_right").text(rightValue).css('margin-left', Math.min(event.clientX - 40, 270));
                  $("#range_" + id + "_new").text("range: [" + _this.range_array[id - 1][0] + " — " + rightValue + "]");
                }
                $('#numeric_check_' + id).prop('checked', true);
                _this.drawBasicBars('#thumb_sm_' + id, _this.lines_array[id - 1][0], _this.lines_array[id - 1][1], _this.range_array[id - 1], [130, 15]);
                return _this.livePreview();
              };
            })(this)
          });
          $("#range_" + (i + 1) + "_left").text(each_numeric_linechart_min);
          $("#range_" + (i + 1) + "_right").text(each_numeric_linechart_max);
          results1.push($("#range_" + (i + 1) + "_new").text("range: [" + each_numeric_linechart_min + " — " + each_numeric_linechart_max + "]"));
        }
        return results1;
      }
    };

    filter.prototype.livePreview = function() {
      var aa, ab, ac, ad, ae, af, content, current_timeStamp, delete_index, flag, formatted_timeStamp, i, j, k, key, l, n, o, p, q, r, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, selected_range_array, t, u, w, x, z;
      this.selected_sample = [];
      this.selected_groupable_array = [];
      this.selected_attributes_array = [];
      this.selected_attributes_units_array = [];
      this.selected_no_data_attributes_array = [];
      selected_range_array = [];
      if (attributes_array.length > 0) {
        for (i = l = 1, ref = attributes_array.length; 1 <= ref ? l <= ref : l >= ref; i = 1 <= ref ? ++l : --l) {
          if ($('#numeric_check_' + i).is(':checked')) {
            this.selected_attributes_array.push(attributes_array[i - 1]);
            this.selected_attributes_units_array.push(attributes_array_units[i - 1]);
          }
        }
      }
      if (no_data_attributes_array.length > 0) {
        for (i = n = 1, ref1 = no_data_attributes_array.length; 1 <= ref1 ? n <= ref1 : n >= ref1; i = 1 <= ref1 ? ++n : --n) {
          if ($('#non_numeric_check_' + i).is(':checked')) {
            this.selected_no_data_attributes_array.push(no_data_attributes_array[i - 1]);
          }
        }
      }
      if (groupable_array_content.length > 0) {
        for (i = o = 1, ref2 = groupable_array_content.length; 1 <= ref2 ? o <= ref2 : o >= ref2; i = 1 <= ref2 ? ++o : --o) {
          if ($('#groupable_check_' + i).is(':checked')) {
            this.selected_groupable_array.push(groupable_array_content[i - 1]);
          }
        }
      }
      if (this.range_array.length > 0) {
        for (i = p = 1, ref3 = this.range_array.length; 1 <= ref3 ? p <= ref3 : p >= ref3; i = 1 <= ref3 ? ++p : --p) {
          if ($('#numeric_check_' + i).is(':checked')) {
            selected_range_array.push(this.range_array[i - 1]);
          }
        }
      }
      $('#right_live_panel').html('');
      for (i = q = 0, ref4 = biom.shape[1] - 1; 0 <= ref4 ? q <= ref4 : q >= ref4; i = 0 <= ref4 ? ++q : --q) {
        this.selected_sample.push(i);
      }
      if (selected_range_array.length > 0) {
        for (i = t = 0, ref5 = selected_range_array.length - 1; 0 <= ref5 ? t <= ref5 : t >= ref5; i = 0 <= ref5 ? ++t : --t) {
          key = this.selected_attributes_array[i];
          for (r = u = 0, ref6 = biom.shape[1] - 1; 0 <= ref6 ? u <= ref6 : u >= ref6; r = 0 <= ref6 ? ++u : --u) {
            if (biom.columns[r].metadata[key].split(" ")[0] < selected_range_array[i][0] || biom.columns[r].metadata[key].split(" ")[0] > selected_range_array[i][1]) {
              delete_index = this.selected_sample.indexOf(r);
              if (delete_index !== -1) {
                this.selected_sample.splice(delete_index, 1);
              }
            }
          }
        }
      }
      if (date_array.length > 0) {
        for (i = w = 0, ref7 = date_array.length - 1; 0 <= ref7 ? w <= ref7 : w >= ref7; i = 0 <= ref7 ? ++w : --w) {
          key = date_array[i];
          for (r = x = 0, ref8 = biom.shape[1] - 1; 0 <= ref8 ? x <= ref8 : x >= ref8; r = 0 <= ref8 ? ++x : --x) {
            current_timeStamp = biom.columns[r].metadata[key];
            if (current_timeStamp.length < 11) {
              formatted_timeStamp = moment(current_timeStamp).utc().format("X");
            } else {
              formatted_timeStamp = moment(current_timeStamp, "YYYY-MM-DDTHH:mm:ss Z").utc().format("X");
            }
            if (formatted_timeStamp < this.range_dates_array[i][0] || formatted_timeStamp > this.range_dates_array[i][1]) {
              delete_index = this.selected_sample.indexOf(r);
              if (delete_index !== -1) {
                this.selected_sample.splice(delete_index, 1);
              }
            }
          }
        }
      }
      if (groupable_array.length > 0) {
        for (i = z = 0, ref9 = groupable_array.length - 1; 0 <= ref9 ? z <= ref9 : z >= ref9; i = 0 <= ref9 ? ++z : --z) {
          for (k = aa = 0, ref10 = biom.shape[1] - 1; 0 <= ref10 ? aa <= ref10 : aa >= ref10; k = 0 <= ref10 ? ++aa : --aa) {
            flag = true;
            if (this.selected_groupable_array.length > 0) {
              for (r = ab = 0, ref11 = this.selected_groupable_array.length - 1; 0 <= ref11 ? ab <= ref11 : ab >= ref11; r = 0 <= ref11 ? ++ab : --ab) {
                if (biom.columns[k].metadata[groupable_array[i]] === this.selected_groupable_array[r]) {
                  flag = false;
                  break;
                }
              }
              if (flag) {
                delete_index = this.selected_sample.indexOf(k);
                if (delete_index !== -1) {
                  this.selected_sample.splice(delete_index, 1);
                }
              }
            } else if (this.selected_groupable_array.length === 0) {
              this.selected_sample = [];
            }
          }
        }
      }
      delete_index = [];
      if (this.selected_sample.length > 0) {
        for (i = ac = 0, ref12 = this.selected_sample.length - 1; 0 <= ref12 ? ac <= ref12 : ac >= ref12; i = 0 <= ref12 ? ++ac : --ac) {
          flag = true;
          if (columns_non_empty_sample_count.length > 1) {
            for (j = ad = 0, ref13 = columns_non_empty_sample_count.length - 1; 0 <= ref13 ? ad <= ref13 : ad >= ref13; j = 0 <= ref13 ? ++ad : --ad) {
              if (columns_non_empty_sample_count[j] === this.selected_sample[i]) {
                flag = false;
                break;
              }
            }
            if (flag) {
              delete_index.push(this.selected_sample[i]);
              console.log('Sample ' + (i + 1) + ' has 0 count');
            }
          }
        }
      }
      if (delete_index.length > 0) {
        for (i = ae = 0, ref14 = delete_index.length - 1; 0 <= ref14 ? ae <= ref14 : ae >= ref14; i = 0 <= ref14 ? ++ae : --ae) {
          this.selected_sample.splice(this.selected_sample.indexOf(delete_index[i]), 1);
        }
      }
      content = "<table id='myTable'><thead><tr><th class = 'headerID myTableHeader'>PHINCH NAME</th><th class = 'headerID myTableHeader'>BIOM SAMPLE ID" + "</th><th class='myTableHeader'>SAMPLE NAME</th><th class='headerCount myTableHeader'>SEQUENCE READS</th></thead>";
      if (this.selected_sample.length > 0) {
        for (i = af = 0, ref15 = this.selected_sample.length - 1; 0 <= ref15 ? af <= ref15 : af >= ref15; i = 0 <= ref15 ? ++af : --af) {
          content += '<tr><td contenteditable="true" id="phinchID_' + this.selected_sample[i] + '">' + phinchID_array[this.selected_sample[i]] + '</td><td>' + (this.selected_sample[i] + 1) + '</td><td>' + columns_sample_name_array[this.selected_sample[i]] + '</td><td>' + columns_sample_count_list[this.selected_sample[i]] + '</td></tr>';
        }
      }
      content += "</table>";
      $("#right_live_panel").html(content);
      $('#myTable').dataTable({
        "iDisplayLength": this.selected_sample.length,
        "aaSorting": [[1, "asc"]],
        "oLanguage": {
          "sLengthMenu": "",
          "sZeroRecords": "Nothing found - sorry",
          "sInfo": "Showing _TOTAL_ Samples",
          "sInfoEmpty": "Showing 0 Samples",
          "sInfoFiltered": "(filtered from _MAX_ total samples)"
        }
      });
      $('#myTable').on('input', 'td[contenteditable]', this.editPhinchID);
      $('tr td:first-child').on('mouseover', function() {
        return $(this).addClass('phinchCol');
      }).on('mouseout', function() {
        return $(this).removeClass('phinchCol');
      });
      return console.log('selected_sample: ' + this.selected_sample.length);
    };

    filter.prototype.downloadPhinch = function(param) {
      $('#exportShareDiv, #exportLoading').fadeIn(100);
      $('#downloadPreview img').attr('src', '');
      $('#downloadPreview a').attr('href', '');
      $('#exportHeader').html('Exporting your biom file to Galaxy, please wait...');
      $('#exportShareDiv .icon-remove').click(function(e) {
        return $('#exportShareDiv').fadeOut(500);
      });
     
      var biomToStore, blob, d, flag, i, index, j, k, l, n, o, obj, p, phinch_data_matrix, q, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, sum_rows, t, tStr, tempCol, that, u, valid_rows_count, w, x;
      that = this;
      phinch.generated_by = 'Phinch 1.0';
      phinch.date = new Date();
      phinch_data_matrix = [];
      sum_rows = new Array(biom.shape[0]);
      for (i = l = 0, ref = biom.shape[0] - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        sum_rows[i] = 0;
      }
      index = 0;
      for (i = n = 0, ref1 = biom.data.length - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; i = 0 <= ref1 ? ++n : --n) {
        flag = false;
        for (j = o = 0, ref2 = this.selected_sample.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; j = 0 <= ref2 ? ++o : --o) {
          if (biom.data[i][1] === this.selected_sample[j]) {
            flag = true;
            break;
          }
        }
        if (flag) {
          phinch_data_matrix[index] = new Array(3);
          phinch_data_matrix[index] = [biom.data[i][0], j, biom.data[i][2]];
          sum_rows[biom.data[i][0]] += biom.data[i][2];
          index++;
        }
      }
      try{
        phinch.data = phinch_data_matrix;
        for (i = p = 0, ref3 = biom.shape[1] - 1; 0 <= ref3 ? p <= ref3 : p >= ref3; i = 0 <= ref3 ? ++p : --p) {
          for (j = q = 0, ref4 = no_data_attributes_array.length - 1; 0 <= ref4 ? q <= ref4 : q >= ref4; j = 0 <= ref4 ? ++q : --q) {
            if (this.selected_no_data_attributes_array.indexOf(no_data_attributes_array[j]) === -1) {
              this.removeFromObjectByKey(phinch.columns[i].metadata, no_data_attributes_array[j]);
            }
          }
          for (k = t = 0, ref5 = attributes_array.length - 1; 0 <= ref5 ? t <= ref5 : t >= ref5; k = 0 <= ref5 ? ++t : --t) {
            if (this.selected_attributes_array.indexOf(attributes_array[k]) === -1) {
              this.removeFromObjectByKey(phinch.columns[i].metadata, attributes_array[k]);
            }
          }
          phinch.columns[i].metadata['phinchID'] = phinchID_array[i];
        }
      }
      catch (e){
        $('#exportHeader').html('Phinch Interactive Environment has been stopped due to inactivity, please restart.');
        $('#exportLoading').fadeOut(500);
      }
      tempCol = new Array(this.selected_sample.length);
      for (i = u = 0, ref6 = this.selected_sample.length - 1; 0 <= ref6 ? u <= ref6 : u >= ref6; i = 0 <= ref6 ? ++u : --u) {
        tempCol[i] = phinch.columns[this.selected_sample[i]];
        if (this.selected_attributes_units_array.length > 0) {
          for (j = w = 0, ref7 = this.selected_attributes_array.length - 1; 0 <= ref7 ? w <= ref7 : w >= ref7; j = 0 <= ref7 ? ++w : --w) {
            if ($('#unit_' + (j + 1)).val() !== "") {
              tStr = String(tempCol[i].metadata[this.selected_attributes_array[j]]).replace(String(this.selected_attributes_units_array[j]), $('#unit_' + (j + 1)).val());
              tempCol[i].metadata[this.selected_attributes_array[j]] = tStr;
            }
          }
        }
      }
      phinch.columns = tempCol;
      valid_rows_count = 0;
      for (i = x = 0, ref8 = sum_rows.length - 1; 0 <= ref8 ? x <= ref8 : x >= ref8; i = 0 <= ref8 ? ++x : --x) {
        if (parseInt(sum_rows[i]) > 0) {
          valid_rows_count++;
        } else {
          phinch.rows[i].metadata.taxonomy = ["k__", "p__", "c__", "o__", "f__", "g__", "s__"];
        }
      }
      phinch.shape[1] = this.selected_sample.length;
      obj = JSON.stringify(phinch);
      blob = new Blob([obj], {
        type: "text/plain;charset=utf-8"
      });
      biomToStore = {};
      biomToStore.name = filename;
      biomToStore.size = blob.size;
      biomToStore.data = obj;
      d = new Date();
      biomToStore.date = d.getUTCFullYear() + "-" + (d.getUTCMonth() + 1) + "-" + d.getUTCDate() + "T" + d.getUTCHours() + ":" + d.getUTCMinutes() + ":" + d.getUTCSeconds() + " UTC";
      return this.server.biom.add(biomToStore).done(function() {
        if (param === 0) {
          //return saveAs(blob, filename);
          //SH: save biom file to galaxy instead of downloading
          postData = {
            fname: obj
          };
          backendServer = 'http://' + window.location.host + window.location.pathname.substr(0, window.location.pathname.lastIndexOf('/')) + "/server/";
          exportEndpoint = backendServer + 'export2.php';
          //do a GET of export2.php first to check if Phinch docker is still running, if so, do the POST
          $.get(exportEndpoint, function(){
            return $.post(exportEndpoint, postData, function(){
              $('#exportHeader').html('Biom file has been successfully exported to Galaxy (you may need to refresh your history)');
              $('#exportLoading').fadeOut(500);
            })
          })  
          .fail(function() {
            $('#exportHeader').html('Phinch Interactive Environment has been stopped due to inactivity, please restart.');
            $('#exportLoading').fadeOut(500);
          });    
    
        } else if (param === 1) {
          return that.jumpToGallery();
        }
      });
    };

    filter.prototype.check_unique = function(arr) {
      arr = $.grep(arr, function(v, k) {
        return $.inArray(v, arr) === k;
      });
      if (arr.length === 1) {
        return true;
      } else {
        return false;
      }
    };

    filter.prototype.sortByFrequency = function(arr) {
      var a, b, i, l, prev, ref;
      a = [];
      b = [];
      arr.sort(this.numberSort);
      for (i = l = 0, ref = arr.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        if (arr[i] !== prev) {
          a.push(arr[i]);
          b.push(1);
        } else {
          b[b.length - 1]++;
        }
        prev = arr[i];
      }
      return [a, b];
    };

    filter.prototype.numberSort = function(a, b) {
      return a - b;
    };

    filter.prototype.removeFromObjectByKey = function(thisObject, key) {
      return delete thisObject[key];
    };

    filter.prototype.editPhinchID = function() {
      var changedID;
      changedID = parseInt($(this)[0].id.replace('phinchID_', ''));
      return phinchID_array[changedID] = $(this).html();
    };

    filter.prototype.drawBasicBars = function(div, each_numeric_linechart0, each_numeric_linechart1, values, size) {
      var eachBarWidth, max_single, tempBar, tempViz, tooltipOverPanel, y;
      d3.select(div + " svg").remove();
      max_single = d3.max(each_numeric_linechart1);
      y = d3.scale.linear().domain([0, max_single]).range([1, size[1]]);
      eachBarWidth = (size[0] + 2) / each_numeric_linechart1.length - 2;
      tooltipOverPanel = d3.select(div).append("div").attr('class', 'basicTooltip').style("visibility", "hidden");
      tempViz = d3.select(div).append("svg").attr("width", size[0]).attr("height", size[1]);
      return tempBar = tempViz.selectAll('rect').data(each_numeric_linechart1).enter().append("rect").attr('height', function(d) {
        return y(d);
      }).attr('width', Math.max(0.1, eachBarWidth) + 'px').attr('x', function(d, i) {
        return i * (eachBarWidth + 2);
      }).attr('y', function(d, i) {
        return size[1] - y(d);
      }).attr('fill', function(d, i) {
        if (values === null) {
          return '#919396';
        } else if (values !== null && each_numeric_linechart0[i] >= values[0] && each_numeric_linechart0[i] <= values[1]) {
          return '#919396';
        } else {
          return '#e5e6e7';
        }
      }).on('mouseover', function(d, i) {
        tooltipOverPanel.html('Value: ' + each_numeric_linechart0[i] + ', Freq: ' + d);
        return tooltipOverPanel.style({
          "visibility": "visible",
          top: d3.event.pageY + "px",
          left: (d3.event.pageX + 10) + "px"
        });
      }).on('mouseout', function(d) {
        return tooltipOverPanel.style("visibility", "hidden");
      });
    };

    return filter;

  })();

  window.filter = filter;

}).call(this);
